// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Aevatar.HomeAssistantClient.Intent.Handle
{
    /// <summary>
    /// Builds and executes requests for operations under \intent\handle
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class HandleRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Aevatar.HomeAssistantClient.Intent.Handle.HandleRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public HandleRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/intent/handle", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Aevatar.HomeAssistantClient.Intent.Handle.HandleRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public HandleRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/intent/handle", rawUrl)
        {
        }
        /// <summary>
        /// Handle an intent.You must add `intent:` to your `configuration.yaml` to enable this endpoint.Sample `curl` command:```curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &apos;Content-Type: application/json&apos; \  -d &apos;{ &quot;name&quot;: &quot;SetTimer&quot;, &quot;data&quot;: { &quot;seconds&quot;: &quot;30&quot; } }&apos; \  http://localhost:8123/api/intent/handle```
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Intent.Handle.HandlePostResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Aevatar.HomeAssistantClient.Intent.Handle.HandlePostResponse?> PostAsHandlePostResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Aevatar.HomeAssistantClient.Intent.Handle.HandlePostResponse> PostAsHandlePostResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Aevatar.HomeAssistantClient.Intent.Handle.HandlePostResponse>(requestInfo, global::Aevatar.HomeAssistantClient.Intent.Handle.HandlePostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Handle an intent.You must add `intent:` to your `configuration.yaml` to enable this endpoint.Sample `curl` command:```curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &apos;Content-Type: application/json&apos; \  -d &apos;{ &quot;name&quot;: &quot;SetTimer&quot;, &quot;data&quot;: { &quot;seconds&quot;: &quot;30&quot; } }&apos; \  http://localhost:8123/api/intent/handle```
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Intent.Handle.HandleResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PostAsHandlePostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Aevatar.HomeAssistantClient.Intent.Handle.HandleResponse?> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Aevatar.HomeAssistantClient.Intent.Handle.HandleResponse> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Aevatar.HomeAssistantClient.Intent.Handle.HandleResponse>(requestInfo, global::Aevatar.HomeAssistantClient.Intent.Handle.HandleResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Handle an intent.You must add `intent:` to your `configuration.yaml` to enable this endpoint.Sample `curl` command:```curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &apos;Content-Type: application/json&apos; \  -d &apos;{ &quot;name&quot;: &quot;SetTimer&quot;, &quot;data&quot;: { &quot;seconds&quot;: &quot;30&quot; } }&apos; \  http://localhost:8123/api/intent/handle```
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Intent.Handle.HandleRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Aevatar.HomeAssistantClient.Intent.Handle.HandleRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Aevatar.HomeAssistantClient.Intent.Handle.HandleRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class HandleRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
