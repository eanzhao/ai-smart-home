// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Aevatar.HomeAssistantClient.Services
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Services_services : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The add_item property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_add_item? AddItem { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_add_item AddItem { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The apply property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_apply? Apply { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_apply Apply { get; set; }
#endif
        /// <summary>The browse_media property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_browse_media? BrowseMedia { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_browse_media BrowseMedia { get; set; }
#endif
        /// <summary>The cancel property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_cancel? Cancel { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_cancel Cancel { get; set; }
#endif
        /// <summary>The change property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_change? Change { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_change Change { get; set; }
#endif
        /// <summary>The check_config property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_check_config? CheckConfig { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_check_config CheckConfig { get; set; }
#endif
        /// <summary>The clean_spot property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_clean_spot? CleanSpot { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_clean_spot CleanSpot { get; set; }
#endif
        /// <summary>The clear property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_clear? Clear { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_clear Clear { get; set; }
#endif
        /// <summary>The clear_cache property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_clear_cache? ClearCache { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_clear_cache ClearCache { get; set; }
#endif
        /// <summary>The clear_completed_items property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_clear_completed_items? ClearCompletedItems { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_clear_completed_items ClearCompletedItems { get; set; }
#endif
        /// <summary>The clear_playlist property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_clear_playlist? ClearPlaylist { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_clear_playlist ClearPlaylist { get; set; }
#endif
        /// <summary>The clear_skipped property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_clear_skipped? ClearSkipped { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_clear_skipped ClearSkipped { get; set; }
#endif
        /// <summary>The close_cover property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_close_cover? CloseCover { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_close_cover CloseCover { get; set; }
#endif
        /// <summary>The close_cover_tilt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_close_cover_tilt? CloseCoverTilt { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_close_cover_tilt CloseCoverTilt { get; set; }
#endif
        /// <summary>The cloud_say property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_cloud_say? CloudSay { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_cloud_say CloudSay { get; set; }
#endif
        /// <summary>The complete_all property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_complete_all? CompleteAll { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_complete_all CompleteAll { get; set; }
#endif
        /// <summary>The complete_item property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_complete_item? CompleteItem { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_complete_item CompleteItem { get; set; }
#endif
        /// <summary>The create property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_create? Create { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_create Create { get; set; }
#endif
        /// <summary>The create_automatic property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_create_automatic? CreateAutomatic { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_create_automatic CreateAutomatic { get; set; }
#endif
        /// <summary>The decrease_speed property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_decrease_speed? DecreaseSpeed { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_decrease_speed DecreaseSpeed { get; set; }
#endif
        /// <summary>The decrement property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_decrement? Decrement { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_decrement Decrement { get; set; }
#endif
        /// <summary>The delete property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_delete? Delete { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_delete Delete { get; set; }
#endif
        /// <summary>The disable property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_disable? Disable { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_disable Disable { get; set; }
#endif
        /// <summary>The disable_motion_detection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_disable_motion_detection? DisableMotionDetection { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_disable_motion_detection DisableMotionDetection { get; set; }
#endif
        /// <summary>The dismiss property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_dismiss? Dismiss { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_dismiss Dismiss { get; set; }
#endif
        /// <summary>The dismiss_all property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_dismiss_all? DismissAll { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_dismiss_all DismissAll { get; set; }
#endif
        /// <summary>The enable property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_enable? Enable { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_enable Enable { get; set; }
#endif
        /// <summary>The enable_motion_detection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_enable_motion_detection? EnableMotionDetection { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_enable_motion_detection EnableMotionDetection { get; set; }
#endif
        /// <summary>The finish property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_finish? Finish { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_finish Finish { get; set; }
#endif
        /// <summary>The get_items property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_get_items? GetItems { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_get_items GetItems { get; set; }
#endif
        /// <summary>The get_schedule property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_get_schedule? GetSchedule { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_get_schedule GetSchedule { get; set; }
#endif
        /// <summary>The get_statistics property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_get_statistics? GetStatistics { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_get_statistics GetStatistics { get; set; }
#endif
        /// <summary>The incomplete_all property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_incomplete_all? IncompleteAll { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_incomplete_all IncompleteAll { get; set; }
#endif
        /// <summary>The incomplete_item property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_incomplete_item? IncompleteItem { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_incomplete_item IncompleteItem { get; set; }
#endif
        /// <summary>The increase_speed property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_increase_speed? IncreaseSpeed { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_increase_speed IncreaseSpeed { get; set; }
#endif
        /// <summary>The increment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_increment? Increment { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_increment Increment { get; set; }
#endif
        /// <summary>The install property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_install? Install { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_install Install { get; set; }
#endif
        /// <summary>The join property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_join? Join { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_join Join { get; set; }
#endif
        /// <summary>The locate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_locate? Locate { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_locate Locate { get; set; }
#endif
        /// <summary>The log property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_log? Log { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_log Log { get; set; }
#endif
        /// <summary>The media_next_track property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_media_next_track? MediaNextTrack { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_media_next_track MediaNextTrack { get; set; }
#endif
        /// <summary>The media_pause property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_media_pause? MediaPause { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_media_pause MediaPause { get; set; }
#endif
        /// <summary>The media_play property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_media_play? MediaPlay { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_media_play MediaPlay { get; set; }
#endif
        /// <summary>The media_play_pause property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_media_play_pause? MediaPlayPause { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_media_play_pause MediaPlayPause { get; set; }
#endif
        /// <summary>The media_previous_track property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_media_previous_track? MediaPreviousTrack { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_media_previous_track MediaPreviousTrack { get; set; }
#endif
        /// <summary>The media_seek property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_media_seek? MediaSeek { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_media_seek MediaSeek { get; set; }
#endif
        /// <summary>The media_stop property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_media_stop? MediaStop { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_media_stop MediaStop { get; set; }
#endif
        /// <summary>The notify property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_notify? Notify { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_notify Notify { get; set; }
#endif
        /// <summary>The open_cover property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_open_cover? OpenCover { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_open_cover OpenCover { get; set; }
#endif
        /// <summary>The open_cover_tilt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_open_cover_tilt? OpenCoverTilt { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_open_cover_tilt OpenCoverTilt { get; set; }
#endif
        /// <summary>The oscillate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_oscillate? Oscillate { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_oscillate Oscillate { get; set; }
#endif
        /// <summary>The pause property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_pause? Pause { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_pause Pause { get; set; }
#endif
        /// <summary>The persistent_notification property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_persistent_notification? PersistentNotification { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_persistent_notification PersistentNotification { get; set; }
#endif
        /// <summary>The play_media property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_play_media? PlayMedia { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_play_media PlayMedia { get; set; }
#endif
        /// <summary>The play_stream property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_play_stream? PlayStream { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_play_stream PlayStream { get; set; }
#endif
        /// <summary>The press property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_press? Press { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_press Press { get; set; }
#endif
        /// <summary>The process property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_process? Process { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_process Process { get; set; }
#endif
        /// <summary>The purge property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_purge? Purge { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_purge Purge { get; set; }
#endif
        /// <summary>The purge_entities property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_purge_entities? PurgeEntities { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_purge_entities PurgeEntities { get; set; }
#endif
        /// <summary>The record property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_record? Record { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_record Record { get; set; }
#endif
        /// <summary>The reload property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_reload? Reload { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_reload Reload { get; set; }
#endif
        /// <summary>The reload_all property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_reload_all? ReloadAll { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_reload_all ReloadAll { get; set; }
#endif
        /// <summary>The reload_config_entry property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_reload_config_entry? ReloadConfigEntry { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_reload_config_entry ReloadConfigEntry { get; set; }
#endif
        /// <summary>The reload_core_config property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_reload_core_config? ReloadCoreConfig { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_reload_core_config ReloadCoreConfig { get; set; }
#endif
        /// <summary>The reload_custom_templates property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_reload_custom_templates? ReloadCustomTemplates { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_reload_custom_templates ReloadCustomTemplates { get; set; }
#endif
        /// <summary>The reload_themes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_reload_themes? ReloadThemes { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_reload_themes ReloadThemes { get; set; }
#endif
        /// <summary>The remote_connect property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_remote_connect? RemoteConnect { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_remote_connect RemoteConnect { get; set; }
#endif
        /// <summary>The remote_disconnect property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_remote_disconnect? RemoteDisconnect { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_remote_disconnect RemoteDisconnect { get; set; }
#endif
        /// <summary>The remove_completed_items property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_remove_completed_items? RemoveCompletedItems { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_remove_completed_items RemoveCompletedItems { get; set; }
#endif
        /// <summary>The remove_item property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_remove_item? RemoveItem { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_remove_item RemoveItem { get; set; }
#endif
        /// <summary>The repeat_set property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_repeat_set? RepeatSet { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_repeat_set RepeatSet { get; set; }
#endif
        /// <summary>The reset property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_reset? Reset { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_reset Reset { get; set; }
#endif
        /// <summary>The restart property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_restart? Restart { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_restart Restart { get; set; }
#endif
        /// <summary>The return_to_base property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_return_to_base? ReturnToBase { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_return_to_base ReturnToBase { get; set; }
#endif
        /// <summary>The save_persistent_states property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_save_persistent_states? SavePersistentStates { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_save_persistent_states SavePersistentStates { get; set; }
#endif
        /// <summary>The search_media property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_search_media? SearchMedia { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_search_media SearchMedia { get; set; }
#endif
        /// <summary>The see property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_see? See { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_see See { get; set; }
#endif
        /// <summary>The select_first property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_select_first? SelectFirst { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_select_first SelectFirst { get; set; }
#endif
        /// <summary>The select_last property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_select_last? SelectLast { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_select_last SelectLast { get; set; }
#endif
        /// <summary>The select_next property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_select_next? SelectNext { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_select_next SelectNext { get; set; }
#endif
        /// <summary>The select_option property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_select_option? SelectOption { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_select_option SelectOption { get; set; }
#endif
        /// <summary>The select_previous property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_select_previous? SelectPrevious { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_select_previous SelectPrevious { get; set; }
#endif
        /// <summary>The select_sound_mode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_select_sound_mode? SelectSoundMode { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_select_sound_mode SelectSoundMode { get; set; }
#endif
        /// <summary>The select_source property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_select_source? SelectSource { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_select_source SelectSource { get; set; }
#endif
        /// <summary>The send_command property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_send_command? SendCommand { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_send_command SendCommand { get; set; }
#endif
        /// <summary>The send_message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_send_message? SendMessage { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_send_message SendMessage { get; set; }
#endif
        /// <summary>The set_away_mode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_away_mode? SetAwayMode { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_away_mode SetAwayMode { get; set; }
#endif
        /// <summary>The set_cover_position property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_cover_position? SetCoverPosition { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_cover_position SetCoverPosition { get; set; }
#endif
        /// <summary>The set_cover_tilt_position property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_cover_tilt_position? SetCoverTiltPosition { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_cover_tilt_position SetCoverTiltPosition { get; set; }
#endif
        /// <summary>The set_datetime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_datetime? SetDatetime { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_datetime SetDatetime { get; set; }
#endif
        /// <summary>The set_default_level property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_default_level? SetDefaultLevel { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_default_level SetDefaultLevel { get; set; }
#endif
        /// <summary>The set_direction property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_direction? SetDirection { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_direction SetDirection { get; set; }
#endif
        /// <summary>The set_fan_mode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_fan_mode? SetFanMode { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_fan_mode SetFanMode { get; set; }
#endif
        /// <summary>The set_fan_speed property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_fan_speed? SetFanSpeed { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_fan_speed SetFanSpeed { get; set; }
#endif
        /// <summary>The set_humidity property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_humidity? SetHumidity { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_humidity SetHumidity { get; set; }
#endif
        /// <summary>The set_hvac_mode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_hvac_mode? SetHvacMode { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_hvac_mode SetHvacMode { get; set; }
#endif
        /// <summary>The set_level property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_level? SetLevel { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_level SetLevel { get; set; }
#endif
        /// <summary>The set_location property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_location? SetLocation { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_location SetLocation { get; set; }
#endif
        /// <summary>The set_mode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_mode? SetMode { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_mode SetMode { get; set; }
#endif
        /// <summary>The set_operation_mode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_operation_mode? SetOperationMode { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_operation_mode SetOperationMode { get; set; }
#endif
        /// <summary>The set_options property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_options? SetOptions { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_options SetOptions { get; set; }
#endif
        /// <summary>The set_percentage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_percentage? SetPercentage { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_percentage SetPercentage { get; set; }
#endif
        /// <summary>The set_preset_mode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_preset_mode? SetPresetMode { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_preset_mode SetPresetMode { get; set; }
#endif
        /// <summary>The set_swing_horizontal_mode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_swing_horizontal_mode? SetSwingHorizontalMode { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_swing_horizontal_mode SetSwingHorizontalMode { get; set; }
#endif
        /// <summary>The set_swing_mode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_swing_mode? SetSwingMode { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_swing_mode SetSwingMode { get; set; }
#endif
        /// <summary>The set_temperature property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_temperature? SetTemperature { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_temperature SetTemperature { get; set; }
#endif
        /// <summary>The set_theme property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_theme? SetTheme { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_theme SetTheme { get; set; }
#endif
        /// <summary>The set_value property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_value? SetValue { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_set_value SetValue { get; set; }
#endif
        /// <summary>The shuffle_set property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_shuffle_set? ShuffleSet { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_shuffle_set ShuffleSet { get; set; }
#endif
        /// <summary>The skip property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_skip? Skip { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_skip Skip { get; set; }
#endif
        /// <summary>The snapshot property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_snapshot? Snapshot { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_snapshot Snapshot { get; set; }
#endif
        /// <summary>The sort property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_sort? Sort { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_sort Sort { get; set; }
#endif
        /// <summary>The speak property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_speak? Speak { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_speak Speak { get; set; }
#endif
        /// <summary>The start property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_start? Start { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_start Start { get; set; }
#endif
        /// <summary>The stop property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_stop? Stop { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_stop Stop { get; set; }
#endif
        /// <summary>The stop_cover property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_stop_cover? StopCover { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_stop_cover StopCover { get; set; }
#endif
        /// <summary>The stop_cover_tilt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_stop_cover_tilt? StopCoverTilt { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_stop_cover_tilt StopCoverTilt { get; set; }
#endif
        /// <summary>The toggle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_toggle? Toggle { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_toggle Toggle { get; set; }
#endif
        /// <summary>The toggle_cover_tilt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_toggle_cover_tilt? ToggleCoverTilt { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_toggle_cover_tilt ToggleCoverTilt { get; set; }
#endif
        /// <summary>The trigger property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_trigger? Trigger { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_trigger Trigger { get; set; }
#endif
        /// <summary>The turn_off property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_turn_off? TurnOff { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_turn_off TurnOff { get; set; }
#endif
        /// <summary>The turn_on property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_turn_on? TurnOn { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_turn_on TurnOn { get; set; }
#endif
        /// <summary>The unjoin property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_unjoin? Unjoin { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_unjoin Unjoin { get; set; }
#endif
        /// <summary>The update_entity property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_update_entity? UpdateEntity { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_update_entity UpdateEntity { get; set; }
#endif
        /// <summary>The update_item property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_update_item? UpdateItem { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_update_item UpdateItem { get; set; }
#endif
        /// <summary>The volume_down property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_volume_down? VolumeDown { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_volume_down VolumeDown { get; set; }
#endif
        /// <summary>The volume_mute property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_volume_mute? VolumeMute { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_volume_mute VolumeMute { get; set; }
#endif
        /// <summary>The volume_set property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_volume_set? VolumeSet { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_volume_set VolumeSet { get; set; }
#endif
        /// <summary>The volume_up property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_volume_up? VolumeUp { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_volume_up VolumeUp { get; set; }
#endif
        /// <summary>The write property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Services.Services_services_write? Write { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Services.Services_services_write Write { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Aevatar.HomeAssistantClient.Services.Services_services"/> and sets the default values.
        /// </summary>
        public Services_services()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Services.Services_services"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Aevatar.HomeAssistantClient.Services.Services_services CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Aevatar.HomeAssistantClient.Services.Services_services();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "add_item", n => { AddItem = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_add_item>(global::Aevatar.HomeAssistantClient.Services.Services_services_add_item.CreateFromDiscriminatorValue); } },
                { "apply", n => { Apply = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_apply>(global::Aevatar.HomeAssistantClient.Services.Services_services_apply.CreateFromDiscriminatorValue); } },
                { "browse_media", n => { BrowseMedia = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_browse_media>(global::Aevatar.HomeAssistantClient.Services.Services_services_browse_media.CreateFromDiscriminatorValue); } },
                { "cancel", n => { Cancel = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_cancel>(global::Aevatar.HomeAssistantClient.Services.Services_services_cancel.CreateFromDiscriminatorValue); } },
                { "change", n => { Change = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_change>(global::Aevatar.HomeAssistantClient.Services.Services_services_change.CreateFromDiscriminatorValue); } },
                { "check_config", n => { CheckConfig = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_check_config>(global::Aevatar.HomeAssistantClient.Services.Services_services_check_config.CreateFromDiscriminatorValue); } },
                { "clean_spot", n => { CleanSpot = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_clean_spot>(global::Aevatar.HomeAssistantClient.Services.Services_services_clean_spot.CreateFromDiscriminatorValue); } },
                { "clear", n => { Clear = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_clear>(global::Aevatar.HomeAssistantClient.Services.Services_services_clear.CreateFromDiscriminatorValue); } },
                { "clear_cache", n => { ClearCache = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_clear_cache>(global::Aevatar.HomeAssistantClient.Services.Services_services_clear_cache.CreateFromDiscriminatorValue); } },
                { "clear_completed_items", n => { ClearCompletedItems = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_clear_completed_items>(global::Aevatar.HomeAssistantClient.Services.Services_services_clear_completed_items.CreateFromDiscriminatorValue); } },
                { "clear_playlist", n => { ClearPlaylist = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_clear_playlist>(global::Aevatar.HomeAssistantClient.Services.Services_services_clear_playlist.CreateFromDiscriminatorValue); } },
                { "clear_skipped", n => { ClearSkipped = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_clear_skipped>(global::Aevatar.HomeAssistantClient.Services.Services_services_clear_skipped.CreateFromDiscriminatorValue); } },
                { "close_cover", n => { CloseCover = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_close_cover>(global::Aevatar.HomeAssistantClient.Services.Services_services_close_cover.CreateFromDiscriminatorValue); } },
                { "close_cover_tilt", n => { CloseCoverTilt = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_close_cover_tilt>(global::Aevatar.HomeAssistantClient.Services.Services_services_close_cover_tilt.CreateFromDiscriminatorValue); } },
                { "cloud_say", n => { CloudSay = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_cloud_say>(global::Aevatar.HomeAssistantClient.Services.Services_services_cloud_say.CreateFromDiscriminatorValue); } },
                { "complete_all", n => { CompleteAll = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_complete_all>(global::Aevatar.HomeAssistantClient.Services.Services_services_complete_all.CreateFromDiscriminatorValue); } },
                { "complete_item", n => { CompleteItem = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_complete_item>(global::Aevatar.HomeAssistantClient.Services.Services_services_complete_item.CreateFromDiscriminatorValue); } },
                { "create", n => { Create = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_create>(global::Aevatar.HomeAssistantClient.Services.Services_services_create.CreateFromDiscriminatorValue); } },
                { "create_automatic", n => { CreateAutomatic = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_create_automatic>(global::Aevatar.HomeAssistantClient.Services.Services_services_create_automatic.CreateFromDiscriminatorValue); } },
                { "decrease_speed", n => { DecreaseSpeed = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_decrease_speed>(global::Aevatar.HomeAssistantClient.Services.Services_services_decrease_speed.CreateFromDiscriminatorValue); } },
                { "decrement", n => { Decrement = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_decrement>(global::Aevatar.HomeAssistantClient.Services.Services_services_decrement.CreateFromDiscriminatorValue); } },
                { "delete", n => { Delete = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_delete>(global::Aevatar.HomeAssistantClient.Services.Services_services_delete.CreateFromDiscriminatorValue); } },
                { "disable", n => { Disable = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_disable>(global::Aevatar.HomeAssistantClient.Services.Services_services_disable.CreateFromDiscriminatorValue); } },
                { "disable_motion_detection", n => { DisableMotionDetection = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_disable_motion_detection>(global::Aevatar.HomeAssistantClient.Services.Services_services_disable_motion_detection.CreateFromDiscriminatorValue); } },
                { "dismiss", n => { Dismiss = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_dismiss>(global::Aevatar.HomeAssistantClient.Services.Services_services_dismiss.CreateFromDiscriminatorValue); } },
                { "dismiss_all", n => { DismissAll = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_dismiss_all>(global::Aevatar.HomeAssistantClient.Services.Services_services_dismiss_all.CreateFromDiscriminatorValue); } },
                { "enable", n => { Enable = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_enable>(global::Aevatar.HomeAssistantClient.Services.Services_services_enable.CreateFromDiscriminatorValue); } },
                { "enable_motion_detection", n => { EnableMotionDetection = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_enable_motion_detection>(global::Aevatar.HomeAssistantClient.Services.Services_services_enable_motion_detection.CreateFromDiscriminatorValue); } },
                { "finish", n => { Finish = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_finish>(global::Aevatar.HomeAssistantClient.Services.Services_services_finish.CreateFromDiscriminatorValue); } },
                { "get_items", n => { GetItems = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_get_items>(global::Aevatar.HomeAssistantClient.Services.Services_services_get_items.CreateFromDiscriminatorValue); } },
                { "get_schedule", n => { GetSchedule = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_get_schedule>(global::Aevatar.HomeAssistantClient.Services.Services_services_get_schedule.CreateFromDiscriminatorValue); } },
                { "get_statistics", n => { GetStatistics = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_get_statistics>(global::Aevatar.HomeAssistantClient.Services.Services_services_get_statistics.CreateFromDiscriminatorValue); } },
                { "incomplete_all", n => { IncompleteAll = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_incomplete_all>(global::Aevatar.HomeAssistantClient.Services.Services_services_incomplete_all.CreateFromDiscriminatorValue); } },
                { "incomplete_item", n => { IncompleteItem = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_incomplete_item>(global::Aevatar.HomeAssistantClient.Services.Services_services_incomplete_item.CreateFromDiscriminatorValue); } },
                { "increase_speed", n => { IncreaseSpeed = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_increase_speed>(global::Aevatar.HomeAssistantClient.Services.Services_services_increase_speed.CreateFromDiscriminatorValue); } },
                { "increment", n => { Increment = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_increment>(global::Aevatar.HomeAssistantClient.Services.Services_services_increment.CreateFromDiscriminatorValue); } },
                { "install", n => { Install = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_install>(global::Aevatar.HomeAssistantClient.Services.Services_services_install.CreateFromDiscriminatorValue); } },
                { "join", n => { Join = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_join>(global::Aevatar.HomeAssistantClient.Services.Services_services_join.CreateFromDiscriminatorValue); } },
                { "locate", n => { Locate = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_locate>(global::Aevatar.HomeAssistantClient.Services.Services_services_locate.CreateFromDiscriminatorValue); } },
                { "log", n => { Log = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_log>(global::Aevatar.HomeAssistantClient.Services.Services_services_log.CreateFromDiscriminatorValue); } },
                { "media_next_track", n => { MediaNextTrack = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_media_next_track>(global::Aevatar.HomeAssistantClient.Services.Services_services_media_next_track.CreateFromDiscriminatorValue); } },
                { "media_pause", n => { MediaPause = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_media_pause>(global::Aevatar.HomeAssistantClient.Services.Services_services_media_pause.CreateFromDiscriminatorValue); } },
                { "media_play", n => { MediaPlay = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_media_play>(global::Aevatar.HomeAssistantClient.Services.Services_services_media_play.CreateFromDiscriminatorValue); } },
                { "media_play_pause", n => { MediaPlayPause = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_media_play_pause>(global::Aevatar.HomeAssistantClient.Services.Services_services_media_play_pause.CreateFromDiscriminatorValue); } },
                { "media_previous_track", n => { MediaPreviousTrack = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_media_previous_track>(global::Aevatar.HomeAssistantClient.Services.Services_services_media_previous_track.CreateFromDiscriminatorValue); } },
                { "media_seek", n => { MediaSeek = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_media_seek>(global::Aevatar.HomeAssistantClient.Services.Services_services_media_seek.CreateFromDiscriminatorValue); } },
                { "media_stop", n => { MediaStop = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_media_stop>(global::Aevatar.HomeAssistantClient.Services.Services_services_media_stop.CreateFromDiscriminatorValue); } },
                { "notify", n => { Notify = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_notify>(global::Aevatar.HomeAssistantClient.Services.Services_services_notify.CreateFromDiscriminatorValue); } },
                { "open_cover", n => { OpenCover = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_open_cover>(global::Aevatar.HomeAssistantClient.Services.Services_services_open_cover.CreateFromDiscriminatorValue); } },
                { "open_cover_tilt", n => { OpenCoverTilt = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_open_cover_tilt>(global::Aevatar.HomeAssistantClient.Services.Services_services_open_cover_tilt.CreateFromDiscriminatorValue); } },
                { "oscillate", n => { Oscillate = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_oscillate>(global::Aevatar.HomeAssistantClient.Services.Services_services_oscillate.CreateFromDiscriminatorValue); } },
                { "pause", n => { Pause = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_pause>(global::Aevatar.HomeAssistantClient.Services.Services_services_pause.CreateFromDiscriminatorValue); } },
                { "persistent_notification", n => { PersistentNotification = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_persistent_notification>(global::Aevatar.HomeAssistantClient.Services.Services_services_persistent_notification.CreateFromDiscriminatorValue); } },
                { "play_media", n => { PlayMedia = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_play_media>(global::Aevatar.HomeAssistantClient.Services.Services_services_play_media.CreateFromDiscriminatorValue); } },
                { "play_stream", n => { PlayStream = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_play_stream>(global::Aevatar.HomeAssistantClient.Services.Services_services_play_stream.CreateFromDiscriminatorValue); } },
                { "press", n => { Press = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_press>(global::Aevatar.HomeAssistantClient.Services.Services_services_press.CreateFromDiscriminatorValue); } },
                { "process", n => { Process = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_process>(global::Aevatar.HomeAssistantClient.Services.Services_services_process.CreateFromDiscriminatorValue); } },
                { "purge", n => { Purge = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_purge>(global::Aevatar.HomeAssistantClient.Services.Services_services_purge.CreateFromDiscriminatorValue); } },
                { "purge_entities", n => { PurgeEntities = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_purge_entities>(global::Aevatar.HomeAssistantClient.Services.Services_services_purge_entities.CreateFromDiscriminatorValue); } },
                { "record", n => { Record = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_record>(global::Aevatar.HomeAssistantClient.Services.Services_services_record.CreateFromDiscriminatorValue); } },
                { "reload", n => { Reload = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_reload>(global::Aevatar.HomeAssistantClient.Services.Services_services_reload.CreateFromDiscriminatorValue); } },
                { "reload_all", n => { ReloadAll = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_reload_all>(global::Aevatar.HomeAssistantClient.Services.Services_services_reload_all.CreateFromDiscriminatorValue); } },
                { "reload_config_entry", n => { ReloadConfigEntry = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_reload_config_entry>(global::Aevatar.HomeAssistantClient.Services.Services_services_reload_config_entry.CreateFromDiscriminatorValue); } },
                { "reload_core_config", n => { ReloadCoreConfig = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_reload_core_config>(global::Aevatar.HomeAssistantClient.Services.Services_services_reload_core_config.CreateFromDiscriminatorValue); } },
                { "reload_custom_templates", n => { ReloadCustomTemplates = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_reload_custom_templates>(global::Aevatar.HomeAssistantClient.Services.Services_services_reload_custom_templates.CreateFromDiscriminatorValue); } },
                { "reload_themes", n => { ReloadThemes = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_reload_themes>(global::Aevatar.HomeAssistantClient.Services.Services_services_reload_themes.CreateFromDiscriminatorValue); } },
                { "remote_connect", n => { RemoteConnect = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_remote_connect>(global::Aevatar.HomeAssistantClient.Services.Services_services_remote_connect.CreateFromDiscriminatorValue); } },
                { "remote_disconnect", n => { RemoteDisconnect = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_remote_disconnect>(global::Aevatar.HomeAssistantClient.Services.Services_services_remote_disconnect.CreateFromDiscriminatorValue); } },
                { "remove_completed_items", n => { RemoveCompletedItems = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_remove_completed_items>(global::Aevatar.HomeAssistantClient.Services.Services_services_remove_completed_items.CreateFromDiscriminatorValue); } },
                { "remove_item", n => { RemoveItem = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_remove_item>(global::Aevatar.HomeAssistantClient.Services.Services_services_remove_item.CreateFromDiscriminatorValue); } },
                { "repeat_set", n => { RepeatSet = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_repeat_set>(global::Aevatar.HomeAssistantClient.Services.Services_services_repeat_set.CreateFromDiscriminatorValue); } },
                { "reset", n => { Reset = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_reset>(global::Aevatar.HomeAssistantClient.Services.Services_services_reset.CreateFromDiscriminatorValue); } },
                { "restart", n => { Restart = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_restart>(global::Aevatar.HomeAssistantClient.Services.Services_services_restart.CreateFromDiscriminatorValue); } },
                { "return_to_base", n => { ReturnToBase = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_return_to_base>(global::Aevatar.HomeAssistantClient.Services.Services_services_return_to_base.CreateFromDiscriminatorValue); } },
                { "save_persistent_states", n => { SavePersistentStates = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_save_persistent_states>(global::Aevatar.HomeAssistantClient.Services.Services_services_save_persistent_states.CreateFromDiscriminatorValue); } },
                { "search_media", n => { SearchMedia = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_search_media>(global::Aevatar.HomeAssistantClient.Services.Services_services_search_media.CreateFromDiscriminatorValue); } },
                { "see", n => { See = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_see>(global::Aevatar.HomeAssistantClient.Services.Services_services_see.CreateFromDiscriminatorValue); } },
                { "select_first", n => { SelectFirst = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_select_first>(global::Aevatar.HomeAssistantClient.Services.Services_services_select_first.CreateFromDiscriminatorValue); } },
                { "select_last", n => { SelectLast = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_select_last>(global::Aevatar.HomeAssistantClient.Services.Services_services_select_last.CreateFromDiscriminatorValue); } },
                { "select_next", n => { SelectNext = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_select_next>(global::Aevatar.HomeAssistantClient.Services.Services_services_select_next.CreateFromDiscriminatorValue); } },
                { "select_option", n => { SelectOption = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_select_option>(global::Aevatar.HomeAssistantClient.Services.Services_services_select_option.CreateFromDiscriminatorValue); } },
                { "select_previous", n => { SelectPrevious = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_select_previous>(global::Aevatar.HomeAssistantClient.Services.Services_services_select_previous.CreateFromDiscriminatorValue); } },
                { "select_sound_mode", n => { SelectSoundMode = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_select_sound_mode>(global::Aevatar.HomeAssistantClient.Services.Services_services_select_sound_mode.CreateFromDiscriminatorValue); } },
                { "select_source", n => { SelectSource = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_select_source>(global::Aevatar.HomeAssistantClient.Services.Services_services_select_source.CreateFromDiscriminatorValue); } },
                { "send_command", n => { SendCommand = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_send_command>(global::Aevatar.HomeAssistantClient.Services.Services_services_send_command.CreateFromDiscriminatorValue); } },
                { "send_message", n => { SendMessage = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_send_message>(global::Aevatar.HomeAssistantClient.Services.Services_services_send_message.CreateFromDiscriminatorValue); } },
                { "set_away_mode", n => { SetAwayMode = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_away_mode>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_away_mode.CreateFromDiscriminatorValue); } },
                { "set_cover_position", n => { SetCoverPosition = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_cover_position>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_cover_position.CreateFromDiscriminatorValue); } },
                { "set_cover_tilt_position", n => { SetCoverTiltPosition = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_cover_tilt_position>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_cover_tilt_position.CreateFromDiscriminatorValue); } },
                { "set_datetime", n => { SetDatetime = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_datetime>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_datetime.CreateFromDiscriminatorValue); } },
                { "set_default_level", n => { SetDefaultLevel = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_default_level>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_default_level.CreateFromDiscriminatorValue); } },
                { "set_direction", n => { SetDirection = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_direction>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_direction.CreateFromDiscriminatorValue); } },
                { "set_fan_mode", n => { SetFanMode = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_fan_mode>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_fan_mode.CreateFromDiscriminatorValue); } },
                { "set_fan_speed", n => { SetFanSpeed = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_fan_speed>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_fan_speed.CreateFromDiscriminatorValue); } },
                { "set_humidity", n => { SetHumidity = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_humidity>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_humidity.CreateFromDiscriminatorValue); } },
                { "set_hvac_mode", n => { SetHvacMode = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_hvac_mode>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_hvac_mode.CreateFromDiscriminatorValue); } },
                { "set_level", n => { SetLevel = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_level>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_level.CreateFromDiscriminatorValue); } },
                { "set_location", n => { SetLocation = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_location>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_location.CreateFromDiscriminatorValue); } },
                { "set_mode", n => { SetMode = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_mode>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_mode.CreateFromDiscriminatorValue); } },
                { "set_operation_mode", n => { SetOperationMode = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_operation_mode>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_operation_mode.CreateFromDiscriminatorValue); } },
                { "set_options", n => { SetOptions = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_options>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_options.CreateFromDiscriminatorValue); } },
                { "set_percentage", n => { SetPercentage = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_percentage>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_percentage.CreateFromDiscriminatorValue); } },
                { "set_preset_mode", n => { SetPresetMode = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_preset_mode>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_preset_mode.CreateFromDiscriminatorValue); } },
                { "set_swing_horizontal_mode", n => { SetSwingHorizontalMode = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_swing_horizontal_mode>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_swing_horizontal_mode.CreateFromDiscriminatorValue); } },
                { "set_swing_mode", n => { SetSwingMode = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_swing_mode>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_swing_mode.CreateFromDiscriminatorValue); } },
                { "set_temperature", n => { SetTemperature = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_temperature>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_temperature.CreateFromDiscriminatorValue); } },
                { "set_theme", n => { SetTheme = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_theme>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_theme.CreateFromDiscriminatorValue); } },
                { "set_value", n => { SetValue = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_value>(global::Aevatar.HomeAssistantClient.Services.Services_services_set_value.CreateFromDiscriminatorValue); } },
                { "shuffle_set", n => { ShuffleSet = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_shuffle_set>(global::Aevatar.HomeAssistantClient.Services.Services_services_shuffle_set.CreateFromDiscriminatorValue); } },
                { "skip", n => { Skip = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_skip>(global::Aevatar.HomeAssistantClient.Services.Services_services_skip.CreateFromDiscriminatorValue); } },
                { "snapshot", n => { Snapshot = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_snapshot>(global::Aevatar.HomeAssistantClient.Services.Services_services_snapshot.CreateFromDiscriminatorValue); } },
                { "sort", n => { Sort = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_sort>(global::Aevatar.HomeAssistantClient.Services.Services_services_sort.CreateFromDiscriminatorValue); } },
                { "speak", n => { Speak = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_speak>(global::Aevatar.HomeAssistantClient.Services.Services_services_speak.CreateFromDiscriminatorValue); } },
                { "start", n => { Start = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_start>(global::Aevatar.HomeAssistantClient.Services.Services_services_start.CreateFromDiscriminatorValue); } },
                { "stop", n => { Stop = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_stop>(global::Aevatar.HomeAssistantClient.Services.Services_services_stop.CreateFromDiscriminatorValue); } },
                { "stop_cover", n => { StopCover = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_stop_cover>(global::Aevatar.HomeAssistantClient.Services.Services_services_stop_cover.CreateFromDiscriminatorValue); } },
                { "stop_cover_tilt", n => { StopCoverTilt = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_stop_cover_tilt>(global::Aevatar.HomeAssistantClient.Services.Services_services_stop_cover_tilt.CreateFromDiscriminatorValue); } },
                { "toggle", n => { Toggle = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_toggle>(global::Aevatar.HomeAssistantClient.Services.Services_services_toggle.CreateFromDiscriminatorValue); } },
                { "toggle_cover_tilt", n => { ToggleCoverTilt = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_toggle_cover_tilt>(global::Aevatar.HomeAssistantClient.Services.Services_services_toggle_cover_tilt.CreateFromDiscriminatorValue); } },
                { "trigger", n => { Trigger = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_trigger>(global::Aevatar.HomeAssistantClient.Services.Services_services_trigger.CreateFromDiscriminatorValue); } },
                { "turn_off", n => { TurnOff = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_turn_off>(global::Aevatar.HomeAssistantClient.Services.Services_services_turn_off.CreateFromDiscriminatorValue); } },
                { "turn_on", n => { TurnOn = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_turn_on>(global::Aevatar.HomeAssistantClient.Services.Services_services_turn_on.CreateFromDiscriminatorValue); } },
                { "unjoin", n => { Unjoin = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_unjoin>(global::Aevatar.HomeAssistantClient.Services.Services_services_unjoin.CreateFromDiscriminatorValue); } },
                { "update_entity", n => { UpdateEntity = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_update_entity>(global::Aevatar.HomeAssistantClient.Services.Services_services_update_entity.CreateFromDiscriminatorValue); } },
                { "update_item", n => { UpdateItem = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_update_item>(global::Aevatar.HomeAssistantClient.Services.Services_services_update_item.CreateFromDiscriminatorValue); } },
                { "volume_down", n => { VolumeDown = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_volume_down>(global::Aevatar.HomeAssistantClient.Services.Services_services_volume_down.CreateFromDiscriminatorValue); } },
                { "volume_mute", n => { VolumeMute = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_volume_mute>(global::Aevatar.HomeAssistantClient.Services.Services_services_volume_mute.CreateFromDiscriminatorValue); } },
                { "volume_set", n => { VolumeSet = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_volume_set>(global::Aevatar.HomeAssistantClient.Services.Services_services_volume_set.CreateFromDiscriminatorValue); } },
                { "volume_up", n => { VolumeUp = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_volume_up>(global::Aevatar.HomeAssistantClient.Services.Services_services_volume_up.CreateFromDiscriminatorValue); } },
                { "write", n => { Write = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_write>(global::Aevatar.HomeAssistantClient.Services.Services_services_write.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_add_item>("add_item", AddItem);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_apply>("apply", Apply);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_browse_media>("browse_media", BrowseMedia);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_cancel>("cancel", Cancel);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_change>("change", Change);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_check_config>("check_config", CheckConfig);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_clean_spot>("clean_spot", CleanSpot);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_clear>("clear", Clear);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_clear_cache>("clear_cache", ClearCache);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_clear_completed_items>("clear_completed_items", ClearCompletedItems);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_clear_playlist>("clear_playlist", ClearPlaylist);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_clear_skipped>("clear_skipped", ClearSkipped);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_close_cover>("close_cover", CloseCover);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_close_cover_tilt>("close_cover_tilt", CloseCoverTilt);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_cloud_say>("cloud_say", CloudSay);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_complete_all>("complete_all", CompleteAll);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_complete_item>("complete_item", CompleteItem);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_create>("create", Create);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_create_automatic>("create_automatic", CreateAutomatic);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_decrease_speed>("decrease_speed", DecreaseSpeed);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_decrement>("decrement", Decrement);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_delete>("delete", Delete);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_disable>("disable", Disable);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_disable_motion_detection>("disable_motion_detection", DisableMotionDetection);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_dismiss>("dismiss", Dismiss);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_dismiss_all>("dismiss_all", DismissAll);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_enable>("enable", Enable);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_enable_motion_detection>("enable_motion_detection", EnableMotionDetection);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_finish>("finish", Finish);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_get_items>("get_items", GetItems);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_get_schedule>("get_schedule", GetSchedule);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_get_statistics>("get_statistics", GetStatistics);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_incomplete_all>("incomplete_all", IncompleteAll);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_incomplete_item>("incomplete_item", IncompleteItem);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_increase_speed>("increase_speed", IncreaseSpeed);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_increment>("increment", Increment);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_install>("install", Install);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_join>("join", Join);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_locate>("locate", Locate);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_log>("log", Log);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_media_next_track>("media_next_track", MediaNextTrack);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_media_pause>("media_pause", MediaPause);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_media_play>("media_play", MediaPlay);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_media_play_pause>("media_play_pause", MediaPlayPause);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_media_previous_track>("media_previous_track", MediaPreviousTrack);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_media_seek>("media_seek", MediaSeek);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_media_stop>("media_stop", MediaStop);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_notify>("notify", Notify);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_open_cover>("open_cover", OpenCover);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_open_cover_tilt>("open_cover_tilt", OpenCoverTilt);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_oscillate>("oscillate", Oscillate);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_pause>("pause", Pause);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_persistent_notification>("persistent_notification", PersistentNotification);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_play_media>("play_media", PlayMedia);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_play_stream>("play_stream", PlayStream);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_press>("press", Press);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_process>("process", Process);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_purge>("purge", Purge);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_purge_entities>("purge_entities", PurgeEntities);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_record>("record", Record);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_reload>("reload", Reload);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_reload_all>("reload_all", ReloadAll);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_reload_config_entry>("reload_config_entry", ReloadConfigEntry);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_reload_core_config>("reload_core_config", ReloadCoreConfig);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_reload_custom_templates>("reload_custom_templates", ReloadCustomTemplates);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_reload_themes>("reload_themes", ReloadThemes);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_remote_connect>("remote_connect", RemoteConnect);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_remote_disconnect>("remote_disconnect", RemoteDisconnect);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_remove_completed_items>("remove_completed_items", RemoveCompletedItems);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_remove_item>("remove_item", RemoveItem);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_repeat_set>("repeat_set", RepeatSet);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_reset>("reset", Reset);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_restart>("restart", Restart);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_return_to_base>("return_to_base", ReturnToBase);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_save_persistent_states>("save_persistent_states", SavePersistentStates);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_search_media>("search_media", SearchMedia);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_see>("see", See);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_select_first>("select_first", SelectFirst);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_select_last>("select_last", SelectLast);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_select_next>("select_next", SelectNext);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_select_option>("select_option", SelectOption);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_select_previous>("select_previous", SelectPrevious);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_select_sound_mode>("select_sound_mode", SelectSoundMode);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_select_source>("select_source", SelectSource);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_send_command>("send_command", SendCommand);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_send_message>("send_message", SendMessage);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_away_mode>("set_away_mode", SetAwayMode);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_cover_position>("set_cover_position", SetCoverPosition);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_cover_tilt_position>("set_cover_tilt_position", SetCoverTiltPosition);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_datetime>("set_datetime", SetDatetime);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_default_level>("set_default_level", SetDefaultLevel);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_direction>("set_direction", SetDirection);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_fan_mode>("set_fan_mode", SetFanMode);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_fan_speed>("set_fan_speed", SetFanSpeed);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_humidity>("set_humidity", SetHumidity);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_hvac_mode>("set_hvac_mode", SetHvacMode);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_level>("set_level", SetLevel);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_location>("set_location", SetLocation);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_mode>("set_mode", SetMode);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_operation_mode>("set_operation_mode", SetOperationMode);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_options>("set_options", SetOptions);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_percentage>("set_percentage", SetPercentage);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_preset_mode>("set_preset_mode", SetPresetMode);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_swing_horizontal_mode>("set_swing_horizontal_mode", SetSwingHorizontalMode);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_swing_mode>("set_swing_mode", SetSwingMode);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_temperature>("set_temperature", SetTemperature);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_theme>("set_theme", SetTheme);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_set_value>("set_value", SetValue);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_shuffle_set>("shuffle_set", ShuffleSet);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_skip>("skip", Skip);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_snapshot>("snapshot", Snapshot);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_sort>("sort", Sort);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_speak>("speak", Speak);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_start>("start", Start);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_stop>("stop", Stop);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_stop_cover>("stop_cover", StopCover);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_stop_cover_tilt>("stop_cover_tilt", StopCoverTilt);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_toggle>("toggle", Toggle);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_toggle_cover_tilt>("toggle_cover_tilt", ToggleCoverTilt);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_trigger>("trigger", Trigger);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_turn_off>("turn_off", TurnOff);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_turn_on>("turn_on", TurnOn);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_unjoin>("unjoin", Unjoin);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_update_entity>("update_entity", UpdateEntity);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_update_item>("update_item", UpdateItem);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_volume_down>("volume_down", VolumeDown);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_volume_mute>("volume_mute", VolumeMute);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_volume_set>("volume_set", VolumeSet);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_volume_up>("volume_up", VolumeUp);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Services.Services_services_write>("write", Write);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
