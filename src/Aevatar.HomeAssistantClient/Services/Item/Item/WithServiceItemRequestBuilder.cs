// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Aevatar.HomeAssistantClient.Services.Item.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \services\{domain}\{service}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithServiceItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithServiceItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/services/{domain}/{service}{?return_response*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithServiceItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/services/{domain}/{service}{?return_response*}", rawUrl)
        {
        }
        /// <summary>
        /// Calls a service within a specific domain. Will return when the service has been executed.You can pass an optional JSON object to be used as `service_data`.```{    &quot;entity_id&quot;: &quot;light.Ceiling&quot;}```Returns a list of states that have changed while the service was being executed, and optionally response data, if supported by the service.```[    {        &quot;attributes&quot;: {},        &quot;entity_id&quot;: &quot;sun.sun&quot;,        &quot;last_changed&quot;: &quot;2016-05-30T21:43:32.418320+00:00&quot;,        &quot;state&quot;: &quot;below_horizon&quot;    },    {        &quot;attributes&quot;: {},        &quot;entity_id&quot;: &quot;process.Dropbox&quot;,        &quot;last_changed&quot;: &quot;22016-05-30T21:43:32.418320+00:00&quot;,        &quot;state&quot;: &quot;on&quot;    }]```&gt; **tip**&gt; The result will include any states that changed while the service was being executed, even if their change was the result of something else happening in the system.If the service you&apos;re calling supports returning response data, you can retrieve it by adding `?return_response` to the URL. Your response will then contain both the list of changed entities and the service response data.```{    &quot;changed_states&quot;: [        {            &quot;attributes&quot;: {},            &quot;entity_id&quot;: &quot;sun.sun&quot;,            &quot;last_changed&quot;: &quot;2024-04-22T20:45:54.418320-04:00&quot;,            &quot;state&quot;: &quot;below_horizon&quot;        },        {            &quot;attributes&quot;: {},            &quot;entity_id&quot;: &quot;binary_sensor.dropbox&quot;,            &quot;last_changed&quot;: &quot;2024-04-22T20:45:54.418320-04:00&quot;,            &quot;state&quot;: &quot;on&quot;        }    ],    &quot;service_response&quot;: {        &quot;weather.new_york_forecast&quot;: {            &quot;forecast&quot;: [                {                    &quot;condition&quot;: &quot;clear-night&quot;,                    &quot;datetime&quot;: &quot;2024-04-22T20:45:55.173725-04:00&quot;,                    &quot;precipitation_probability&quot;: 0,                    &quot;temperature&quot;: null,                    &quot;templow&quot;: 6.0                },                {                    &quot;condition&quot;: &quot;rainy&quot;,                    &quot;datetime&quot;: &quot;2024-04-23T20:45:55.173756-04:00&quot;,                    &quot;precipitation_probability&quot;: 60,                    &quot;temperature&quot;: 16.0,                    &quot;templow&quot;: 4.0                }            ]        }    }}```&gt; **NOTE**&gt; Some services return no data, others optionally return response data, and some always return response data.&gt; If you don&apos;t use `return_response` when calling a service that must return data, the API will return a 400. Similarly, you will receive a 400 if you use `return_response` when calling a service that doesn&apos;t return any data.Sample `curl` commands:Turn the light on:```curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  -d &apos;{&quot;entity_id&quot;: &quot;switch.christmas_lights&quot;}&apos; \  http://localhost:8123/api/services/switch/turn_on```Sample `python` command using the [Requests](https://requests.readthedocs.io/en/latest/) module:Turn the light on:```from requests import posturl = &quot;http://localhost:8123/api/services/light/turn_on&quot;headers = {&quot;Authorization&quot;: &quot;Bearer TOKEN&quot;}data = {&quot;entity_id&quot;: &quot;light.study_light&quot;}response = post(url, headers=headers, json=data)print(response.text)```Send an MQTT message:```curl \  -H &quot;Content-Type: application/json&quot; \  -H &quot;Authorization: Bearer TOKEN&quot; \  -d &apos;{&quot;payload&quot;: &quot;OFF&quot;, &quot;topic&quot;: &quot;home/fridge&quot;, &quot;retain&quot;: &quot;True&quot;}&apos; \  http://localhost:8123/api/services/mqtt/publish```Retrieve daily weather forecast information:```curl \  -H &quot;Content-Type: application/json&quot; \  -H &quot;Authorization: Bearer TOKEN&quot; \  -d &apos;{&quot;entity_id&quot;: &quot;weather.forecast_home&quot;, &quot;type&quot;: &quot;daily&quot;}&apos; \  http://localhost:8123/api/services/weather/get_forecasts?return_response```
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServicePostResponse"/></returns>
        /// <param name="body">Service data (entity_id and other service-specific parameters)</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServicePostResponse?> PostAsWithServicePostResponseAsync(global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServicePostRequestBody body, Action<RequestConfiguration<global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceItemRequestBuilder.WithServiceItemRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServicePostResponse> PostAsWithServicePostResponseAsync(global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServicePostRequestBody body, Action<RequestConfiguration<global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceItemRequestBuilder.WithServiceItemRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServicePostResponse>(requestInfo, global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServicePostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Calls a service within a specific domain. Will return when the service has been executed.You can pass an optional JSON object to be used as `service_data`.```{    &quot;entity_id&quot;: &quot;light.Ceiling&quot;}```Returns a list of states that have changed while the service was being executed, and optionally response data, if supported by the service.```[    {        &quot;attributes&quot;: {},        &quot;entity_id&quot;: &quot;sun.sun&quot;,        &quot;last_changed&quot;: &quot;2016-05-30T21:43:32.418320+00:00&quot;,        &quot;state&quot;: &quot;below_horizon&quot;    },    {        &quot;attributes&quot;: {},        &quot;entity_id&quot;: &quot;process.Dropbox&quot;,        &quot;last_changed&quot;: &quot;22016-05-30T21:43:32.418320+00:00&quot;,        &quot;state&quot;: &quot;on&quot;    }]```&gt; **tip**&gt; The result will include any states that changed while the service was being executed, even if their change was the result of something else happening in the system.If the service you&apos;re calling supports returning response data, you can retrieve it by adding `?return_response` to the URL. Your response will then contain both the list of changed entities and the service response data.```{    &quot;changed_states&quot;: [        {            &quot;attributes&quot;: {},            &quot;entity_id&quot;: &quot;sun.sun&quot;,            &quot;last_changed&quot;: &quot;2024-04-22T20:45:54.418320-04:00&quot;,            &quot;state&quot;: &quot;below_horizon&quot;        },        {            &quot;attributes&quot;: {},            &quot;entity_id&quot;: &quot;binary_sensor.dropbox&quot;,            &quot;last_changed&quot;: &quot;2024-04-22T20:45:54.418320-04:00&quot;,            &quot;state&quot;: &quot;on&quot;        }    ],    &quot;service_response&quot;: {        &quot;weather.new_york_forecast&quot;: {            &quot;forecast&quot;: [                {                    &quot;condition&quot;: &quot;clear-night&quot;,                    &quot;datetime&quot;: &quot;2024-04-22T20:45:55.173725-04:00&quot;,                    &quot;precipitation_probability&quot;: 0,                    &quot;temperature&quot;: null,                    &quot;templow&quot;: 6.0                },                {                    &quot;condition&quot;: &quot;rainy&quot;,                    &quot;datetime&quot;: &quot;2024-04-23T20:45:55.173756-04:00&quot;,                    &quot;precipitation_probability&quot;: 60,                    &quot;temperature&quot;: 16.0,                    &quot;templow&quot;: 4.0                }            ]        }    }}```&gt; **NOTE**&gt; Some services return no data, others optionally return response data, and some always return response data.&gt; If you don&apos;t use `return_response` when calling a service that must return data, the API will return a 400. Similarly, you will receive a 400 if you use `return_response` when calling a service that doesn&apos;t return any data.Sample `curl` commands:Turn the light on:```curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  -d &apos;{&quot;entity_id&quot;: &quot;switch.christmas_lights&quot;}&apos; \  http://localhost:8123/api/services/switch/turn_on```Sample `python` command using the [Requests](https://requests.readthedocs.io/en/latest/) module:Turn the light on:```from requests import posturl = &quot;http://localhost:8123/api/services/light/turn_on&quot;headers = {&quot;Authorization&quot;: &quot;Bearer TOKEN&quot;}data = {&quot;entity_id&quot;: &quot;light.study_light&quot;}response = post(url, headers=headers, json=data)print(response.text)```Send an MQTT message:```curl \  -H &quot;Content-Type: application/json&quot; \  -H &quot;Authorization: Bearer TOKEN&quot; \  -d &apos;{&quot;payload&quot;: &quot;OFF&quot;, &quot;topic&quot;: &quot;home/fridge&quot;, &quot;retain&quot;: &quot;True&quot;}&apos; \  http://localhost:8123/api/services/mqtt/publish```Retrieve daily weather forecast information:```curl \  -H &quot;Content-Type: application/json&quot; \  -H &quot;Authorization: Bearer TOKEN&quot; \  -d &apos;{&quot;entity_id&quot;: &quot;weather.forecast_home&quot;, &quot;type&quot;: &quot;daily&quot;}&apos; \  http://localhost:8123/api/services/weather/get_forecasts?return_response```
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceResponse"/></returns>
        /// <param name="body">Service data (entity_id and other service-specific parameters)</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PostAsWithServicePostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceResponse?> PostAsync(global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServicePostRequestBody body, Action<RequestConfiguration<global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceItemRequestBuilder.WithServiceItemRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceResponse> PostAsync(global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServicePostRequestBody body, Action<RequestConfiguration<global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceItemRequestBuilder.WithServiceItemRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceResponse>(requestInfo, global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Calls a service within a specific domain. Will return when the service has been executed.You can pass an optional JSON object to be used as `service_data`.```{    &quot;entity_id&quot;: &quot;light.Ceiling&quot;}```Returns a list of states that have changed while the service was being executed, and optionally response data, if supported by the service.```[    {        &quot;attributes&quot;: {},        &quot;entity_id&quot;: &quot;sun.sun&quot;,        &quot;last_changed&quot;: &quot;2016-05-30T21:43:32.418320+00:00&quot;,        &quot;state&quot;: &quot;below_horizon&quot;    },    {        &quot;attributes&quot;: {},        &quot;entity_id&quot;: &quot;process.Dropbox&quot;,        &quot;last_changed&quot;: &quot;22016-05-30T21:43:32.418320+00:00&quot;,        &quot;state&quot;: &quot;on&quot;    }]```&gt; **tip**&gt; The result will include any states that changed while the service was being executed, even if their change was the result of something else happening in the system.If the service you&apos;re calling supports returning response data, you can retrieve it by adding `?return_response` to the URL. Your response will then contain both the list of changed entities and the service response data.```{    &quot;changed_states&quot;: [        {            &quot;attributes&quot;: {},            &quot;entity_id&quot;: &quot;sun.sun&quot;,            &quot;last_changed&quot;: &quot;2024-04-22T20:45:54.418320-04:00&quot;,            &quot;state&quot;: &quot;below_horizon&quot;        },        {            &quot;attributes&quot;: {},            &quot;entity_id&quot;: &quot;binary_sensor.dropbox&quot;,            &quot;last_changed&quot;: &quot;2024-04-22T20:45:54.418320-04:00&quot;,            &quot;state&quot;: &quot;on&quot;        }    ],    &quot;service_response&quot;: {        &quot;weather.new_york_forecast&quot;: {            &quot;forecast&quot;: [                {                    &quot;condition&quot;: &quot;clear-night&quot;,                    &quot;datetime&quot;: &quot;2024-04-22T20:45:55.173725-04:00&quot;,                    &quot;precipitation_probability&quot;: 0,                    &quot;temperature&quot;: null,                    &quot;templow&quot;: 6.0                },                {                    &quot;condition&quot;: &quot;rainy&quot;,                    &quot;datetime&quot;: &quot;2024-04-23T20:45:55.173756-04:00&quot;,                    &quot;precipitation_probability&quot;: 60,                    &quot;temperature&quot;: 16.0,                    &quot;templow&quot;: 4.0                }            ]        }    }}```&gt; **NOTE**&gt; Some services return no data, others optionally return response data, and some always return response data.&gt; If you don&apos;t use `return_response` when calling a service that must return data, the API will return a 400. Similarly, you will receive a 400 if you use `return_response` when calling a service that doesn&apos;t return any data.Sample `curl` commands:Turn the light on:```curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  -d &apos;{&quot;entity_id&quot;: &quot;switch.christmas_lights&quot;}&apos; \  http://localhost:8123/api/services/switch/turn_on```Sample `python` command using the [Requests](https://requests.readthedocs.io/en/latest/) module:Turn the light on:```from requests import posturl = &quot;http://localhost:8123/api/services/light/turn_on&quot;headers = {&quot;Authorization&quot;: &quot;Bearer TOKEN&quot;}data = {&quot;entity_id&quot;: &quot;light.study_light&quot;}response = post(url, headers=headers, json=data)print(response.text)```Send an MQTT message:```curl \  -H &quot;Content-Type: application/json&quot; \  -H &quot;Authorization: Bearer TOKEN&quot; \  -d &apos;{&quot;payload&quot;: &quot;OFF&quot;, &quot;topic&quot;: &quot;home/fridge&quot;, &quot;retain&quot;: &quot;True&quot;}&apos; \  http://localhost:8123/api/services/mqtt/publish```Retrieve daily weather forecast information:```curl \  -H &quot;Content-Type: application/json&quot; \  -H &quot;Authorization: Bearer TOKEN&quot; \  -d &apos;{&quot;entity_id&quot;: &quot;weather.forecast_home&quot;, &quot;type&quot;: &quot;daily&quot;}&apos; \  http://localhost:8123/api/services/weather/get_forecasts?return_response```
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Service data (entity_id and other service-specific parameters)</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServicePostRequestBody body, Action<RequestConfiguration<global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceItemRequestBuilder.WithServiceItemRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServicePostRequestBody body, Action<RequestConfiguration<global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceItemRequestBuilder.WithServiceItemRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Calls a service within a specific domain. Will return when the service has been executed.You can pass an optional JSON object to be used as `service_data`.```{    &quot;entity_id&quot;: &quot;light.Ceiling&quot;}```Returns a list of states that have changed while the service was being executed, and optionally response data, if supported by the service.```[    {        &quot;attributes&quot;: {},        &quot;entity_id&quot;: &quot;sun.sun&quot;,        &quot;last_changed&quot;: &quot;2016-05-30T21:43:32.418320+00:00&quot;,        &quot;state&quot;: &quot;below_horizon&quot;    },    {        &quot;attributes&quot;: {},        &quot;entity_id&quot;: &quot;process.Dropbox&quot;,        &quot;last_changed&quot;: &quot;22016-05-30T21:43:32.418320+00:00&quot;,        &quot;state&quot;: &quot;on&quot;    }]```&gt; **tip**&gt; The result will include any states that changed while the service was being executed, even if their change was the result of something else happening in the system.If the service you&apos;re calling supports returning response data, you can retrieve it by adding `?return_response` to the URL. Your response will then contain both the list of changed entities and the service response data.```{    &quot;changed_states&quot;: [        {            &quot;attributes&quot;: {},            &quot;entity_id&quot;: &quot;sun.sun&quot;,            &quot;last_changed&quot;: &quot;2024-04-22T20:45:54.418320-04:00&quot;,            &quot;state&quot;: &quot;below_horizon&quot;        },        {            &quot;attributes&quot;: {},            &quot;entity_id&quot;: &quot;binary_sensor.dropbox&quot;,            &quot;last_changed&quot;: &quot;2024-04-22T20:45:54.418320-04:00&quot;,            &quot;state&quot;: &quot;on&quot;        }    ],    &quot;service_response&quot;: {        &quot;weather.new_york_forecast&quot;: {            &quot;forecast&quot;: [                {                    &quot;condition&quot;: &quot;clear-night&quot;,                    &quot;datetime&quot;: &quot;2024-04-22T20:45:55.173725-04:00&quot;,                    &quot;precipitation_probability&quot;: 0,                    &quot;temperature&quot;: null,                    &quot;templow&quot;: 6.0                },                {                    &quot;condition&quot;: &quot;rainy&quot;,                    &quot;datetime&quot;: &quot;2024-04-23T20:45:55.173756-04:00&quot;,                    &quot;precipitation_probability&quot;: 60,                    &quot;temperature&quot;: 16.0,                    &quot;templow&quot;: 4.0                }            ]        }    }}```&gt; **NOTE**&gt; Some services return no data, others optionally return response data, and some always return response data.&gt; If you don&apos;t use `return_response` when calling a service that must return data, the API will return a 400. Similarly, you will receive a 400 if you use `return_response` when calling a service that doesn&apos;t return any data.Sample `curl` commands:Turn the light on:```curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  -d &apos;{&quot;entity_id&quot;: &quot;switch.christmas_lights&quot;}&apos; \  http://localhost:8123/api/services/switch/turn_on```Sample `python` command using the [Requests](https://requests.readthedocs.io/en/latest/) module:Turn the light on:```from requests import posturl = &quot;http://localhost:8123/api/services/light/turn_on&quot;headers = {&quot;Authorization&quot;: &quot;Bearer TOKEN&quot;}data = {&quot;entity_id&quot;: &quot;light.study_light&quot;}response = post(url, headers=headers, json=data)print(response.text)```Send an MQTT message:```curl \  -H &quot;Content-Type: application/json&quot; \  -H &quot;Authorization: Bearer TOKEN&quot; \  -d &apos;{&quot;payload&quot;: &quot;OFF&quot;, &quot;topic&quot;: &quot;home/fridge&quot;, &quot;retain&quot;: &quot;True&quot;}&apos; \  http://localhost:8123/api/services/mqtt/publish```Retrieve daily weather forecast information:```curl \  -H &quot;Content-Type: application/json&quot; \  -H &quot;Authorization: Bearer TOKEN&quot; \  -d &apos;{&quot;entity_id&quot;: &quot;weather.forecast_home&quot;, &quot;type&quot;: &quot;daily&quot;}&apos; \  http://localhost:8123/api/services/weather/get_forecasts?return_response```
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithServiceItemRequestBuilderPostQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("return_response")]
            public string? ReturnResponse { get; set; }
#nullable restore
#else
            [QueryParameter("return_response")]
            public string ReturnResponse { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithServiceItemRequestBuilderPostRequestConfiguration : RequestConfiguration<global::Aevatar.HomeAssistantClient.Services.Item.Item.WithServiceItemRequestBuilder.WithServiceItemRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
