// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Aevatar.HomeAssistantClient.States
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class States_attributes : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The actionParams property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActionParams { get; set; }
#nullable restore
#else
        public string ActionParams { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The auto_update property</summary>
        public bool? AutoUpdate { get; set; }
        /// <summary>The azimuth property</summary>
        public double? Azimuth { get; set; }
        /// <summary>The battery_icon property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BatteryIcon { get; set; }
#nullable restore
#else
        public string BatteryIcon { get; set; }
#endif
        /// <summary>The battery_level property</summary>
        public int? BatteryLevel { get; set; }
        /// <summary>The color_mode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? ColorMode { get; set; }
#nullable restore
#else
        public UntypedNode ColorMode { get; set; }
#endif
        /// <summary>The command_set property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CommandSet { get; set; }
#nullable restore
#else
        public string CommandSet { get; set; }
#endif
        /// <summary>The device_class property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceClass { get; set; }
#nullable restore
#else
        public string DeviceClass { get; set; }
#endif
        /// <summary>The device_trackers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DeviceTrackers { get; set; }
#nullable restore
#else
        public List<string> DeviceTrackers { get; set; }
#endif
        /// <summary>The display_precision property</summary>
        public int? DisplayPrecision { get; set; }
        /// <summary>The editable property</summary>
        public bool? Editable { get; set; }
        /// <summary>The effect_list property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? EffectList { get; set; }
#nullable restore
#else
        public List<string> EffectList { get; set; }
#endif
        /// <summary>The elevation property</summary>
        public double? Elevation { get; set; }
        /// <summary>The entity_picture property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EntityPicture { get; set; }
#nullable restore
#else
        public string EntityPicture { get; set; }
#endif
        /// <summary>The event_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? EventType { get; set; }
#nullable restore
#else
        public UntypedNode EventType { get; set; }
#endif
        /// <summary>The event_types property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? EventTypes { get; set; }
#nullable restore
#else
        public List<string> EventTypes { get; set; }
#endif
        /// <summary>The fan_modes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? FanModes { get; set; }
#nullable restore
#else
        public List<string> FanModes { get; set; }
#endif
        /// <summary>The friendly_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FriendlyName { get; set; }
#nullable restore
#else
        public string FriendlyName { get; set; }
#endif
        /// <summary>The hvac_modes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? HvacModes { get; set; }
#nullable restore
#else
        public List<string> HvacModes { get; set; }
#endif
        /// <summary>The icon property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Icon { get; set; }
#nullable restore
#else
        public string Icon { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The info property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Info { get; set; }
#nullable restore
#else
        public string Info { get; set; }
#endif
        /// <summary>The in_progress property</summary>
        public bool? InProgress { get; set; }
        /// <summary>The installed_version property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InstalledVersion { get; set; }
#nullable restore
#else
        public string InstalledVersion { get; set; }
#endif
        /// <summary>The latest_version property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LatestVersion { get; set; }
#nullable restore
#else
        public string LatestVersion { get; set; }
#endif
        /// <summary>The latitude property</summary>
        public double? Latitude { get; set; }
        /// <summary>The location property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Location { get; set; }
#nullable restore
#else
        public string Location { get; set; }
#endif
        /// <summary>The longitude property</summary>
        public double? Longitude { get; set; }
        /// <summary>The marker_high_level property</summary>
        public int? MarkerHighLevel { get; set; }
        /// <summary>The marker_low_level property</summary>
        public int? MarkerLowLevel { get; set; }
        /// <summary>The marker_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MarkerType { get; set; }
#nullable restore
#else
        public string MarkerType { get; set; }
#endif
        /// <summary>The max property</summary>
        public double? Max { get; set; }
        /// <summary>The max_color_temp_kelvin property</summary>
        public double? MaxColorTempKelvin { get; set; }
        /// <summary>The max_humidity property</summary>
        public double? MaxHumidity { get; set; }
        /// <summary>The max_mireds property</summary>
        public double? MaxMireds { get; set; }
        /// <summary>The max_temp property</summary>
        public double? MaxTemp { get; set; }
        /// <summary>The min property</summary>
        public double? Min { get; set; }
        /// <summary>The min_color_temp_kelvin property</summary>
        public double? MinColorTempKelvin { get; set; }
        /// <summary>The min_humidity property</summary>
        public double? MinHumidity { get; set; }
        /// <summary>The min_mireds property</summary>
        public double? MinMireds { get; set; }
        /// <summary>The min_temp property</summary>
        public double? MinTemp { get; set; }
        /// <summary>The mode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mode { get; set; }
#nullable restore
#else
        public string Mode { get; set; }
#endif
        /// <summary>The next_dawn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextDawn { get; set; }
#nullable restore
#else
        public string NextDawn { get; set; }
#endif
        /// <summary>The next_dusk property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextDusk { get; set; }
#nullable restore
#else
        public string NextDusk { get; set; }
#endif
        /// <summary>The next_midnight property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextMidnight { get; set; }
#nullable restore
#else
        public string NextMidnight { get; set; }
#endif
        /// <summary>The next_noon property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextNoon { get; set; }
#nullable restore
#else
        public string NextNoon { get; set; }
#endif
        /// <summary>The next_rising property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextRising { get; set; }
#nullable restore
#else
        public string NextRising { get; set; }
#endif
        /// <summary>The next_setting property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextSetting { get; set; }
#nullable restore
#else
        public string NextSetting { get; set; }
#endif
        /// <summary>The options property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Options { get; set; }
#nullable restore
#else
        public List<string> Options { get; set; }
#endif
        /// <summary>The passive property</summary>
        public bool? Passive { get; set; }
        /// <summary>The pattern property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Pattern { get; set; }
#nullable restore
#else
        public UntypedNode Pattern { get; set; }
#endif
        /// <summary>The percentage property</summary>
        public int? Percentage { get; set; }
        /// <summary>The percentage_step property</summary>
        public double? PercentageStep { get; set; }
        /// <summary>The persons property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Persons { get; set; }
#nullable restore
#else
        public List<string> Persons { get; set; }
#endif
        /// <summary>The preset_mode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PresetMode { get; set; }
#nullable restore
#else
        public string PresetMode { get; set; }
#endif
        /// <summary>The preset_modes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PresetModes { get; set; }
#nullable restore
#else
        public List<string> PresetModes { get; set; }
#endif
        /// <summary>The radius property</summary>
        public int? Radius { get; set; }
        /// <summary>The release_summary property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? ReleaseSummary { get; set; }
#nullable restore
#else
        public UntypedNode ReleaseSummary { get; set; }
#endif
        /// <summary>The release_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReleaseUrl { get; set; }
#nullable restore
#else
        public string ReleaseUrl { get; set; }
#endif
        /// <summary>The rising property</summary>
        public bool? Rising { get; set; }
        /// <summary>The serial property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Serial { get; set; }
#nullable restore
#else
        public string Serial { get; set; }
#endif
        /// <summary>The skipped_version property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? SkippedVersion { get; set; }
#nullable restore
#else
        public UntypedNode SkippedVersion { get; set; }
#endif
        /// <summary>The source_list property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SourceList { get; set; }
#nullable restore
#else
        public List<string> SourceList { get; set; }
#endif
        /// <summary>The state_class property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StateClass { get; set; }
#nullable restore
#else
        public string StateClass { get; set; }
#endif
        /// <summary>The state_message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StateMessage { get; set; }
#nullable restore
#else
        public string StateMessage { get; set; }
#endif
        /// <summary>The state_reason property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? StateReason { get; set; }
#nullable restore
#else
        public UntypedNode StateReason { get; set; }
#endif
        /// <summary>The step property</summary>
        public double? Step { get; set; }
        /// <summary>The supported_color_modes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SupportedColorModes { get; set; }
#nullable restore
#else
        public List<string> SupportedColorModes { get; set; }
#endif
        /// <summary>The supported_features property</summary>
        public int? SupportedFeatures { get; set; }
        /// <summary>The swing_modes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SwingModes { get; set; }
#nullable restore
#else
        public List<string> SwingModes { get; set; }
#endif
        /// <summary>The target_temp_step property</summary>
        public double? TargetTempStep { get; set; }
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Title { get; set; }
#nullable restore
#else
        public UntypedNode Title { get; set; }
#endif
        /// <summary>The unit_of_measurement property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitOfMeasurement { get; set; }
#nullable restore
#else
        public string UnitOfMeasurement { get; set; }
#endif
        /// <summary>The update_percentage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? UpdatePercentage { get; set; }
#nullable restore
#else
        public UntypedNode UpdatePercentage { get; set; }
#endif
        /// <summary>The uri_supported property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UriSupported { get; set; }
#nullable restore
#else
        public string UriSupported { get; set; }
#endif
        /// <summary>The user_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Aevatar.HomeAssistantClient.States.States_attributes"/> and sets the default values.
        /// </summary>
        public States_attributes()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.States.States_attributes"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Aevatar.HomeAssistantClient.States.States_attributes CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Aevatar.HomeAssistantClient.States.States_attributes();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "action params", n => { ActionParams = n.GetStringValue(); } },
                { "auto_update", n => { AutoUpdate = n.GetBoolValue(); } },
                { "azimuth", n => { Azimuth = n.GetDoubleValue(); } },
                { "battery_icon", n => { BatteryIcon = n.GetStringValue(); } },
                { "battery_level", n => { BatteryLevel = n.GetIntValue(); } },
                { "color_mode", n => { ColorMode = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "command_set", n => { CommandSet = n.GetStringValue(); } },
                { "device_class", n => { DeviceClass = n.GetStringValue(); } },
                { "device_trackers", n => { DeviceTrackers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "display_precision", n => { DisplayPrecision = n.GetIntValue(); } },
                { "editable", n => { Editable = n.GetBoolValue(); } },
                { "effect_list", n => { EffectList = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "elevation", n => { Elevation = n.GetDoubleValue(); } },
                { "entity_picture", n => { EntityPicture = n.GetStringValue(); } },
                { "event_type", n => { EventType = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "event_types", n => { EventTypes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "fan_modes", n => { FanModes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "friendly_name", n => { FriendlyName = n.GetStringValue(); } },
                { "hvac_modes", n => { HvacModes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "icon", n => { Icon = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "in_progress", n => { InProgress = n.GetBoolValue(); } },
                { "info", n => { Info = n.GetStringValue(); } },
                { "installed_version", n => { InstalledVersion = n.GetStringValue(); } },
                { "latest_version", n => { LatestVersion = n.GetStringValue(); } },
                { "latitude", n => { Latitude = n.GetDoubleValue(); } },
                { "location", n => { Location = n.GetStringValue(); } },
                { "longitude", n => { Longitude = n.GetDoubleValue(); } },
                { "marker_high_level", n => { MarkerHighLevel = n.GetIntValue(); } },
                { "marker_low_level", n => { MarkerLowLevel = n.GetIntValue(); } },
                { "marker_type", n => { MarkerType = n.GetStringValue(); } },
                { "max", n => { Max = n.GetDoubleValue(); } },
                { "max_color_temp_kelvin", n => { MaxColorTempKelvin = n.GetDoubleValue(); } },
                { "max_humidity", n => { MaxHumidity = n.GetDoubleValue(); } },
                { "max_mireds", n => { MaxMireds = n.GetDoubleValue(); } },
                { "max_temp", n => { MaxTemp = n.GetDoubleValue(); } },
                { "min", n => { Min = n.GetDoubleValue(); } },
                { "min_color_temp_kelvin", n => { MinColorTempKelvin = n.GetDoubleValue(); } },
                { "min_humidity", n => { MinHumidity = n.GetDoubleValue(); } },
                { "min_mireds", n => { MinMireds = n.GetDoubleValue(); } },
                { "min_temp", n => { MinTemp = n.GetDoubleValue(); } },
                { "mode", n => { Mode = n.GetStringValue(); } },
                { "next_dawn", n => { NextDawn = n.GetStringValue(); } },
                { "next_dusk", n => { NextDusk = n.GetStringValue(); } },
                { "next_midnight", n => { NextMidnight = n.GetStringValue(); } },
                { "next_noon", n => { NextNoon = n.GetStringValue(); } },
                { "next_rising", n => { NextRising = n.GetStringValue(); } },
                { "next_setting", n => { NextSetting = n.GetStringValue(); } },
                { "options", n => { Options = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "passive", n => { Passive = n.GetBoolValue(); } },
                { "pattern", n => { Pattern = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "percentage", n => { Percentage = n.GetIntValue(); } },
                { "percentage_step", n => { PercentageStep = n.GetDoubleValue(); } },
                { "persons", n => { Persons = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "preset_mode", n => { PresetMode = n.GetStringValue(); } },
                { "preset_modes", n => { PresetModes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "radius", n => { Radius = n.GetIntValue(); } },
                { "release_summary", n => { ReleaseSummary = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "release_url", n => { ReleaseUrl = n.GetStringValue(); } },
                { "rising", n => { Rising = n.GetBoolValue(); } },
                { "serial", n => { Serial = n.GetStringValue(); } },
                { "skipped_version", n => { SkippedVersion = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "source_list", n => { SourceList = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "state_class", n => { StateClass = n.GetStringValue(); } },
                { "state_message", n => { StateMessage = n.GetStringValue(); } },
                { "state_reason", n => { StateReason = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "step", n => { Step = n.GetDoubleValue(); } },
                { "supported_color_modes", n => { SupportedColorModes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "supported_features", n => { SupportedFeatures = n.GetIntValue(); } },
                { "swing_modes", n => { SwingModes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "target_temp_step", n => { TargetTempStep = n.GetDoubleValue(); } },
                { "title", n => { Title = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "unit_of_measurement", n => { UnitOfMeasurement = n.GetStringValue(); } },
                { "update_percentage", n => { UpdatePercentage = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "uri_supported", n => { UriSupported = n.GetStringValue(); } },
                { "user_id", n => { UserId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("action params", ActionParams);
            writer.WriteBoolValue("auto_update", AutoUpdate);
            writer.WriteDoubleValue("azimuth", Azimuth);
            writer.WriteStringValue("battery_icon", BatteryIcon);
            writer.WriteIntValue("battery_level", BatteryLevel);
            writer.WriteObjectValue<UntypedNode>("color_mode", ColorMode);
            writer.WriteStringValue("command_set", CommandSet);
            writer.WriteStringValue("device_class", DeviceClass);
            writer.WriteCollectionOfPrimitiveValues<string>("device_trackers", DeviceTrackers);
            writer.WriteIntValue("display_precision", DisplayPrecision);
            writer.WriteBoolValue("editable", Editable);
            writer.WriteCollectionOfPrimitiveValues<string>("effect_list", EffectList);
            writer.WriteDoubleValue("elevation", Elevation);
            writer.WriteStringValue("entity_picture", EntityPicture);
            writer.WriteObjectValue<UntypedNode>("event_type", EventType);
            writer.WriteCollectionOfPrimitiveValues<string>("event_types", EventTypes);
            writer.WriteCollectionOfPrimitiveValues<string>("fan_modes", FanModes);
            writer.WriteStringValue("friendly_name", FriendlyName);
            writer.WriteCollectionOfPrimitiveValues<string>("hvac_modes", HvacModes);
            writer.WriteStringValue("icon", Icon);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("info", Info);
            writer.WriteBoolValue("in_progress", InProgress);
            writer.WriteStringValue("installed_version", InstalledVersion);
            writer.WriteStringValue("latest_version", LatestVersion);
            writer.WriteDoubleValue("latitude", Latitude);
            writer.WriteStringValue("location", Location);
            writer.WriteDoubleValue("longitude", Longitude);
            writer.WriteIntValue("marker_high_level", MarkerHighLevel);
            writer.WriteIntValue("marker_low_level", MarkerLowLevel);
            writer.WriteStringValue("marker_type", MarkerType);
            writer.WriteDoubleValue("max", Max);
            writer.WriteDoubleValue("max_color_temp_kelvin", MaxColorTempKelvin);
            writer.WriteDoubleValue("max_humidity", MaxHumidity);
            writer.WriteDoubleValue("max_mireds", MaxMireds);
            writer.WriteDoubleValue("max_temp", MaxTemp);
            writer.WriteDoubleValue("min", Min);
            writer.WriteDoubleValue("min_color_temp_kelvin", MinColorTempKelvin);
            writer.WriteDoubleValue("min_humidity", MinHumidity);
            writer.WriteDoubleValue("min_mireds", MinMireds);
            writer.WriteDoubleValue("min_temp", MinTemp);
            writer.WriteStringValue("mode", Mode);
            writer.WriteStringValue("next_dawn", NextDawn);
            writer.WriteStringValue("next_dusk", NextDusk);
            writer.WriteStringValue("next_midnight", NextMidnight);
            writer.WriteStringValue("next_noon", NextNoon);
            writer.WriteStringValue("next_rising", NextRising);
            writer.WriteStringValue("next_setting", NextSetting);
            writer.WriteCollectionOfPrimitiveValues<string>("options", Options);
            writer.WriteBoolValue("passive", Passive);
            writer.WriteObjectValue<UntypedNode>("pattern", Pattern);
            writer.WriteIntValue("percentage", Percentage);
            writer.WriteDoubleValue("percentage_step", PercentageStep);
            writer.WriteCollectionOfPrimitiveValues<string>("persons", Persons);
            writer.WriteStringValue("preset_mode", PresetMode);
            writer.WriteCollectionOfPrimitiveValues<string>("preset_modes", PresetModes);
            writer.WriteIntValue("radius", Radius);
            writer.WriteObjectValue<UntypedNode>("release_summary", ReleaseSummary);
            writer.WriteStringValue("release_url", ReleaseUrl);
            writer.WriteBoolValue("rising", Rising);
            writer.WriteStringValue("serial", Serial);
            writer.WriteObjectValue<UntypedNode>("skipped_version", SkippedVersion);
            writer.WriteCollectionOfPrimitiveValues<string>("source_list", SourceList);
            writer.WriteStringValue("state_class", StateClass);
            writer.WriteStringValue("state_message", StateMessage);
            writer.WriteObjectValue<UntypedNode>("state_reason", StateReason);
            writer.WriteDoubleValue("step", Step);
            writer.WriteCollectionOfPrimitiveValues<string>("supported_color_modes", SupportedColorModes);
            writer.WriteIntValue("supported_features", SupportedFeatures);
            writer.WriteCollectionOfPrimitiveValues<string>("swing_modes", SwingModes);
            writer.WriteDoubleValue("target_temp_step", TargetTempStep);
            writer.WriteObjectValue<UntypedNode>("title", Title);
            writer.WriteStringValue("unit_of_measurement", UnitOfMeasurement);
            writer.WriteObjectValue<UntypedNode>("update_percentage", UpdatePercentage);
            writer.WriteStringValue("uri_supported", UriSupported);
            writer.WriteStringValue("user_id", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
