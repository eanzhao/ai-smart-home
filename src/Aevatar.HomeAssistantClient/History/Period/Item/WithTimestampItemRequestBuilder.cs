// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Aevatar.HomeAssistantClient.History.Period.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \history\period\{timestamp}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithTimestampItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTimestampItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/history/period/{timestamp}?filter_entity_id={filter_entity_id}{&end_time*,minimal_response*,no_attributes*,significant_changes_only*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTimestampItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/history/period/{timestamp}?filter_entity_id={filter_entity_id}{&end_time*,minimal_response*,no_attributes*,significant_changes_only*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns an array of state changes in the past. Each object contains further details for the entities.The `&lt;timestamp&gt;` (`YYYY-MM-DDThh:mm:ssTZD`) is optional and defaults to 1 day before the time of the request. It determines the beginning of the period.The following parameters are **required**:`filter_entity_id=&lt;entity_ids&gt;` to filter on one or more entities - comma separated.You can pass the following optional GET parameters:- `end_time=&lt;timestamp&gt;` to choose the end of the period in URL encoded format (defaults to 1 day).- `minimal_response` to only return `last_changed` and `state` for states other than the first and last state (much faster).- `no_attributes` to skip returning attributes from the database (much faster).- `significant_changes_only` to only return significant state changes.Example without `minimal_response````[    [        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;state&quot;: &quot;-3.9&quot;        },        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;state&quot;: &quot;-1.9&quot;        },    ]]```Example with `minimal_response````[    [        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;state&quot;: &quot;-3.9&quot;        },        {            &quot;last_changed&quot;: &quot;2016-02-06T22:20:00+00:00&quot;,            &quot;state&quot;: &quot;-2.9&quot;        },        {            &quot;last_changed&quot;: &quot;2016-02-06T22:22:00+00:00&quot;,            &quot;state&quot;: &quot;-2.2&quot;        },        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:25:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:25:00+00:00&quot;,            &quot;state&quot;: &quot;-1.9&quot;        },    ]]```Sample `curl` commands:```# History of the entity &apos;sensor.temperature&apos; of the past day (default)curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  &quot;http://localhost:8123/api/history/period?filter_entity_id=sensor.temperature&quot;``````# Minimal history of the entity &apos;sensor.temperature&apos; and &apos;sensor.kitchen_temperature&apos; of the past day where the beginning date is set manually to 2023-09-04curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  &quot;http://localhost:8123/api/history/period/2023-09-04T00:00:00+02:00?filter_entity_id=sensor.temperature,sensor.kitchen_temperature&amp;minimal_response&quot;``````# History of the entity &apos;sensor.temperature&apos; during the period from 2021-09-04 to 2023-09-04# Using URL encoded timestampscurl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  &quot;http://localhost:8123/api/history/period/2021-09-04T00%3A00%3A00%2B02%3A00?end_time=2023-09-04T00%3A00%3A00%2B02%3A00&amp;filter_entity_id=sensor.temperature&quot;```
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampGetResponse?> GetAsWithTimestampGetResponseAsync(Action<RequestConfiguration<global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampItemRequestBuilder.WithTimestampItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampGetResponse> GetAsWithTimestampGetResponseAsync(Action<RequestConfiguration<global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampItemRequestBuilder.WithTimestampItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampGetResponse>(requestInfo, global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns an array of state changes in the past. Each object contains further details for the entities.The `&lt;timestamp&gt;` (`YYYY-MM-DDThh:mm:ssTZD`) is optional and defaults to 1 day before the time of the request. It determines the beginning of the period.The following parameters are **required**:`filter_entity_id=&lt;entity_ids&gt;` to filter on one or more entities - comma separated.You can pass the following optional GET parameters:- `end_time=&lt;timestamp&gt;` to choose the end of the period in URL encoded format (defaults to 1 day).- `minimal_response` to only return `last_changed` and `state` for states other than the first and last state (much faster).- `no_attributes` to skip returning attributes from the database (much faster).- `significant_changes_only` to only return significant state changes.Example without `minimal_response````[    [        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;state&quot;: &quot;-3.9&quot;        },        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;state&quot;: &quot;-1.9&quot;        },    ]]```Example with `minimal_response````[    [        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;state&quot;: &quot;-3.9&quot;        },        {            &quot;last_changed&quot;: &quot;2016-02-06T22:20:00+00:00&quot;,            &quot;state&quot;: &quot;-2.9&quot;        },        {            &quot;last_changed&quot;: &quot;2016-02-06T22:22:00+00:00&quot;,            &quot;state&quot;: &quot;-2.2&quot;        },        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:25:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:25:00+00:00&quot;,            &quot;state&quot;: &quot;-1.9&quot;        },    ]]```Sample `curl` commands:```# History of the entity &apos;sensor.temperature&apos; of the past day (default)curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  &quot;http://localhost:8123/api/history/period?filter_entity_id=sensor.temperature&quot;``````# Minimal history of the entity &apos;sensor.temperature&apos; and &apos;sensor.kitchen_temperature&apos; of the past day where the beginning date is set manually to 2023-09-04curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  &quot;http://localhost:8123/api/history/period/2023-09-04T00:00:00+02:00?filter_entity_id=sensor.temperature,sensor.kitchen_temperature&amp;minimal_response&quot;``````# History of the entity &apos;sensor.temperature&apos; during the period from 2021-09-04 to 2023-09-04# Using URL encoded timestampscurl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  &quot;http://localhost:8123/api/history/period/2021-09-04T00%3A00%3A00%2B02%3A00?end_time=2023-09-04T00%3A00%3A00%2B02%3A00&amp;filter_entity_id=sensor.temperature&quot;```
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWithTimestampGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampResponse?> GetAsync(Action<RequestConfiguration<global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampItemRequestBuilder.WithTimestampItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampResponse> GetAsync(Action<RequestConfiguration<global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampItemRequestBuilder.WithTimestampItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampResponse>(requestInfo, global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns an array of state changes in the past. Each object contains further details for the entities.The `&lt;timestamp&gt;` (`YYYY-MM-DDThh:mm:ssTZD`) is optional and defaults to 1 day before the time of the request. It determines the beginning of the period.The following parameters are **required**:`filter_entity_id=&lt;entity_ids&gt;` to filter on one or more entities - comma separated.You can pass the following optional GET parameters:- `end_time=&lt;timestamp&gt;` to choose the end of the period in URL encoded format (defaults to 1 day).- `minimal_response` to only return `last_changed` and `state` for states other than the first and last state (much faster).- `no_attributes` to skip returning attributes from the database (much faster).- `significant_changes_only` to only return significant state changes.Example without `minimal_response````[    [        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;state&quot;: &quot;-3.9&quot;        },        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;state&quot;: &quot;-1.9&quot;        },    ]]```Example with `minimal_response````[    [        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;state&quot;: &quot;-3.9&quot;        },        {            &quot;last_changed&quot;: &quot;2016-02-06T22:20:00+00:00&quot;,            &quot;state&quot;: &quot;-2.9&quot;        },        {            &quot;last_changed&quot;: &quot;2016-02-06T22:22:00+00:00&quot;,            &quot;state&quot;: &quot;-2.2&quot;        },        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:25:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:25:00+00:00&quot;,            &quot;state&quot;: &quot;-1.9&quot;        },    ]]```Sample `curl` commands:```# History of the entity &apos;sensor.temperature&apos; of the past day (default)curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  &quot;http://localhost:8123/api/history/period?filter_entity_id=sensor.temperature&quot;``````# Minimal history of the entity &apos;sensor.temperature&apos; and &apos;sensor.kitchen_temperature&apos; of the past day where the beginning date is set manually to 2023-09-04curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  &quot;http://localhost:8123/api/history/period/2023-09-04T00:00:00+02:00?filter_entity_id=sensor.temperature,sensor.kitchen_temperature&amp;minimal_response&quot;``````# History of the entity &apos;sensor.temperature&apos; during the period from 2021-09-04 to 2023-09-04# Using URL encoded timestampscurl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  &quot;http://localhost:8123/api/history/period/2021-09-04T00%3A00%3A00%2B02%3A00?end_time=2023-09-04T00%3A00%3A00%2B02%3A00&amp;filter_entity_id=sensor.temperature&quot;```
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampItemRequestBuilder.WithTimestampItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampItemRequestBuilder.WithTimestampItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns an array of state changes in the past. Each object contains further details for the entities.The `&lt;timestamp&gt;` (`YYYY-MM-DDThh:mm:ssTZD`) is optional and defaults to 1 day before the time of the request. It determines the beginning of the period.The following parameters are **required**:`filter_entity_id=&lt;entity_ids&gt;` to filter on one or more entities - comma separated.You can pass the following optional GET parameters:- `end_time=&lt;timestamp&gt;` to choose the end of the period in URL encoded format (defaults to 1 day).- `minimal_response` to only return `last_changed` and `state` for states other than the first and last state (much faster).- `no_attributes` to skip returning attributes from the database (much faster).- `significant_changes_only` to only return significant state changes.Example without `minimal_response````[    [        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;state&quot;: &quot;-3.9&quot;        },        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;state&quot;: &quot;-1.9&quot;        },    ]]```Example with `minimal_response````[    [        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:15:00+00:00&quot;,            &quot;state&quot;: &quot;-3.9&quot;        },        {            &quot;last_changed&quot;: &quot;2016-02-06T22:20:00+00:00&quot;,            &quot;state&quot;: &quot;-2.9&quot;        },        {            &quot;last_changed&quot;: &quot;2016-02-06T22:22:00+00:00&quot;,            &quot;state&quot;: &quot;-2.2&quot;        },        {            &quot;attributes&quot;: {                &quot;friendly_name&quot;: &quot;Weather Temperature&quot;,                &quot;unit_of_measurement&quot;: &quot;\u00b0C&quot;            },            &quot;entity_id&quot;: &quot;sensor.weather_temperature&quot;,            &quot;last_changed&quot;: &quot;2016-02-06T22:25:00+00:00&quot;,            &quot;last_updated&quot;: &quot;2016-02-06T22:25:00+00:00&quot;,            &quot;state&quot;: &quot;-1.9&quot;        },    ]]```Sample `curl` commands:```# History of the entity &apos;sensor.temperature&apos; of the past day (default)curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  &quot;http://localhost:8123/api/history/period?filter_entity_id=sensor.temperature&quot;``````# Minimal history of the entity &apos;sensor.temperature&apos; and &apos;sensor.kitchen_temperature&apos; of the past day where the beginning date is set manually to 2023-09-04curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  &quot;http://localhost:8123/api/history/period/2023-09-04T00:00:00+02:00?filter_entity_id=sensor.temperature,sensor.kitchen_temperature&amp;minimal_response&quot;``````# History of the entity &apos;sensor.temperature&apos; during the period from 2021-09-04 to 2023-09-04# Using URL encoded timestampscurl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; \  &quot;http://localhost:8123/api/history/period/2021-09-04T00%3A00%3A00%2B02%3A00?end_time=2023-09-04T00%3A00%3A00%2B02%3A00&amp;filter_entity_id=sensor.temperature&quot;```
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithTimestampItemRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("end_time")]
            public string? EndTime { get; set; }
#nullable restore
#else
            [QueryParameter("end_time")]
            public string EndTime { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter_entity_id")]
            public string? FilterEntityId { get; set; }
#nullable restore
#else
            [QueryParameter("filter_entity_id")]
            public string FilterEntityId { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("minimal_response")]
            public string? MinimalResponse { get; set; }
#nullable restore
#else
            [QueryParameter("minimal_response")]
            public string MinimalResponse { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("no_attributes")]
            public string? NoAttributes { get; set; }
#nullable restore
#else
            [QueryParameter("no_attributes")]
            public string NoAttributes { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("significant_changes_only")]
            public string? SignificantChangesOnly { get; set; }
#nullable restore
#else
            [QueryParameter("significant_changes_only")]
            public string SignificantChangesOnly { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithTimestampItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Aevatar.HomeAssistantClient.History.Period.Item.WithTimestampItemRequestBuilder.WithTimestampItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
