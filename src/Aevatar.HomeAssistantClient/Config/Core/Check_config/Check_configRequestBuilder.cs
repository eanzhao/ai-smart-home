// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Aevatar.HomeAssistantClient.Config.Core.Check_config
{
    /// <summary>
    /// Builds and executes requests for operations under \config\core\check_config
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Check_configRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Aevatar.HomeAssistantClient.Config.Core.Check_config.Check_configRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Check_configRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/config/core/check_config", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Aevatar.HomeAssistantClient.Config.Core.Check_config.Check_configRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Check_configRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/config/core/check_config", rawUrl)
        {
        }
        /// <summary>
        /// Trigger a check of `configuration.yaml`. No additional data needs to be passed in with this request. Needs config integration enabled.If the check is successful, the following will be returned:```{    &quot;errors&quot;: null,    &quot;result&quot;: &quot;valid&quot;}```If the check fails, the errors attribute in the object will list what caused the check to fail. For example:```{    &quot;errors&quot;: &quot;Integration not found: frontend:&quot;,    &quot;result&quot;: &quot;invalid&quot;}```
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Config.Core.Check_config.Check_configPostResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Aevatar.HomeAssistantClient.Config.Core.Check_config.Check_configPostResponse?> PostAsCheck_configPostResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Aevatar.HomeAssistantClient.Config.Core.Check_config.Check_configPostResponse> PostAsCheck_configPostResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Aevatar.HomeAssistantClient.Config.Core.Check_config.Check_configPostResponse>(requestInfo, global::Aevatar.HomeAssistantClient.Config.Core.Check_config.Check_configPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Trigger a check of `configuration.yaml`. No additional data needs to be passed in with this request. Needs config integration enabled.If the check is successful, the following will be returned:```{    &quot;errors&quot;: null,    &quot;result&quot;: &quot;valid&quot;}```If the check fails, the errors attribute in the object will list what caused the check to fail. For example:```{    &quot;errors&quot;: &quot;Integration not found: frontend:&quot;,    &quot;result&quot;: &quot;invalid&quot;}```
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Config.Core.Check_config.Check_configResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PostAsCheck_configPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Aevatar.HomeAssistantClient.Config.Core.Check_config.Check_configResponse?> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Aevatar.HomeAssistantClient.Config.Core.Check_config.Check_configResponse> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Aevatar.HomeAssistantClient.Config.Core.Check_config.Check_configResponse>(requestInfo, global::Aevatar.HomeAssistantClient.Config.Core.Check_config.Check_configResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Trigger a check of `configuration.yaml`. No additional data needs to be passed in with this request. Needs config integration enabled.If the check is successful, the following will be returned:```{    &quot;errors&quot;: null,    &quot;result&quot;: &quot;valid&quot;}```If the check fails, the errors attribute in the object will list what caused the check to fail. For example:```{    &quot;errors&quot;: &quot;Integration not found: frontend:&quot;,    &quot;result&quot;: &quot;invalid&quot;}```
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Config.Core.Check_config.Check_configRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Aevatar.HomeAssistantClient.Config.Core.Check_config.Check_configRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Aevatar.HomeAssistantClient.Config.Core.Check_config.Check_configRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Check_configRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
