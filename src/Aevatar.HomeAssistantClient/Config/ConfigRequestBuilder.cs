// <auto-generated/>
#pragma warning disable CS0618
using Aevatar.HomeAssistantClient.Config.Core;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Aevatar.HomeAssistantClient.Config
{
    /// <summary>
    /// Builds and executes requests for operations under \config
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ConfigRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The core property</summary>
        public global::Aevatar.HomeAssistantClient.Config.Core.CoreRequestBuilder Core
        {
            get => new global::Aevatar.HomeAssistantClient.Config.Core.CoreRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Aevatar.HomeAssistantClient.Config.ConfigRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ConfigRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/config", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Aevatar.HomeAssistantClient.Config.ConfigRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ConfigRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/config", rawUrl)
        {
        }
        /// <summary>
        /// Returns the current configuration as JSON.```{   &quot;components&quot;:[      &quot;sensor.cpuspeed&quot;,      &quot;frontend&quot;,      &quot;config.core&quot;,      &quot;http&quot;,      &quot;map&quot;,      &quot;api&quot;,      &quot;sun&quot;,      &quot;config&quot;,      &quot;discovery&quot;,      &quot;conversation&quot;,      &quot;recorder&quot;,      &quot;group&quot;,      &quot;sensor&quot;,      &quot;websocket_api&quot;,      &quot;automation&quot;,      &quot;config.automation&quot;,      &quot;config.customize&quot;   ],   &quot;config_dir&quot;:&quot;/home/ha/.homeassistant&quot;,   &quot;elevation&quot;:510,   &quot;latitude&quot;:45.8781529,   &quot;location_name&quot;:&quot;Home&quot;,   &quot;longitude&quot;:8.458853651,   &quot;time_zone&quot;:&quot;Europe/Zurich&quot;,   &quot;unit_system&quot;:{      &quot;length&quot;:&quot;km&quot;,      &quot;mass&quot;:&quot;g&quot;,      &quot;temperature&quot;:&quot;\u00b0C&quot;,      &quot;volume&quot;:&quot;L&quot;   },   &quot;version&quot;:&quot;0.56.2&quot;,   &quot;whitelist_external_dirs&quot;:[      &quot;/home/ha/.homeassistant/www&quot;,      &quot;/home/ha/.homeassistant/&quot;   ]}```Sample `curl` command:```curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; http://localhost:8123/api/config```
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse?> GetAsConfigGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse> GetAsConfigGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse>(requestInfo, global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the current configuration as JSON.```{   &quot;components&quot;:[      &quot;sensor.cpuspeed&quot;,      &quot;frontend&quot;,      &quot;config.core&quot;,      &quot;http&quot;,      &quot;map&quot;,      &quot;api&quot;,      &quot;sun&quot;,      &quot;config&quot;,      &quot;discovery&quot;,      &quot;conversation&quot;,      &quot;recorder&quot;,      &quot;group&quot;,      &quot;sensor&quot;,      &quot;websocket_api&quot;,      &quot;automation&quot;,      &quot;config.automation&quot;,      &quot;config.customize&quot;   ],   &quot;config_dir&quot;:&quot;/home/ha/.homeassistant&quot;,   &quot;elevation&quot;:510,   &quot;latitude&quot;:45.8781529,   &quot;location_name&quot;:&quot;Home&quot;,   &quot;longitude&quot;:8.458853651,   &quot;time_zone&quot;:&quot;Europe/Zurich&quot;,   &quot;unit_system&quot;:{      &quot;length&quot;:&quot;km&quot;,      &quot;mass&quot;:&quot;g&quot;,      &quot;temperature&quot;:&quot;\u00b0C&quot;,      &quot;volume&quot;:&quot;L&quot;   },   &quot;version&quot;:&quot;0.56.2&quot;,   &quot;whitelist_external_dirs&quot;:[      &quot;/home/ha/.homeassistant/www&quot;,      &quot;/home/ha/.homeassistant/&quot;   ]}```Sample `curl` command:```curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; http://localhost:8123/api/config```
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Config.ConfigResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsConfigGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Aevatar.HomeAssistantClient.Config.ConfigResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Aevatar.HomeAssistantClient.Config.ConfigResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Aevatar.HomeAssistantClient.Config.ConfigResponse>(requestInfo, global::Aevatar.HomeAssistantClient.Config.ConfigResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the current configuration as JSON.```{   &quot;components&quot;:[      &quot;sensor.cpuspeed&quot;,      &quot;frontend&quot;,      &quot;config.core&quot;,      &quot;http&quot;,      &quot;map&quot;,      &quot;api&quot;,      &quot;sun&quot;,      &quot;config&quot;,      &quot;discovery&quot;,      &quot;conversation&quot;,      &quot;recorder&quot;,      &quot;group&quot;,      &quot;sensor&quot;,      &quot;websocket_api&quot;,      &quot;automation&quot;,      &quot;config.automation&quot;,      &quot;config.customize&quot;   ],   &quot;config_dir&quot;:&quot;/home/ha/.homeassistant&quot;,   &quot;elevation&quot;:510,   &quot;latitude&quot;:45.8781529,   &quot;location_name&quot;:&quot;Home&quot;,   &quot;longitude&quot;:8.458853651,   &quot;time_zone&quot;:&quot;Europe/Zurich&quot;,   &quot;unit_system&quot;:{      &quot;length&quot;:&quot;km&quot;,      &quot;mass&quot;:&quot;g&quot;,      &quot;temperature&quot;:&quot;\u00b0C&quot;,      &quot;volume&quot;:&quot;L&quot;   },   &quot;version&quot;:&quot;0.56.2&quot;,   &quot;whitelist_external_dirs&quot;:[      &quot;/home/ha/.homeassistant/www&quot;,      &quot;/home/ha/.homeassistant/&quot;   ]}```Sample `curl` command:```curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; http://localhost:8123/api/config```
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Config.ConfigRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Aevatar.HomeAssistantClient.Config.ConfigRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Aevatar.HomeAssistantClient.Config.ConfigRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ConfigRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
