// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Aevatar.HomeAssistantClient.Config
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ConfigGetResponse_unit_system : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accumulated_precipitation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccumulatedPrecipitation { get; set; }
#nullable restore
#else
        public string AccumulatedPrecipitation { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The area property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Area { get; set; }
#nullable restore
#else
        public string Area { get; set; }
#endif
        /// <summary>The length property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Length { get; set; }
#nullable restore
#else
        public string Length { get; set; }
#endif
        /// <summary>The mass property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mass { get; set; }
#nullable restore
#else
        public string Mass { get; set; }
#endif
        /// <summary>The pressure property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Pressure { get; set; }
#nullable restore
#else
        public string Pressure { get; set; }
#endif
        /// <summary>The temperature property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Temperature { get; set; }
#nullable restore
#else
        public string Temperature { get; set; }
#endif
        /// <summary>The volume property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Volume { get; set; }
#nullable restore
#else
        public string Volume { get; set; }
#endif
        /// <summary>The wind_speed property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WindSpeed { get; set; }
#nullable restore
#else
        public string WindSpeed { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse_unit_system"/> and sets the default values.
        /// </summary>
        public ConfigGetResponse_unit_system()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse_unit_system"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse_unit_system CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse_unit_system();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accumulated_precipitation", n => { AccumulatedPrecipitation = n.GetStringValue(); } },
                { "area", n => { Area = n.GetStringValue(); } },
                { "length", n => { Length = n.GetStringValue(); } },
                { "mass", n => { Mass = n.GetStringValue(); } },
                { "pressure", n => { Pressure = n.GetStringValue(); } },
                { "temperature", n => { Temperature = n.GetStringValue(); } },
                { "volume", n => { Volume = n.GetStringValue(); } },
                { "wind_speed", n => { WindSpeed = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accumulated_precipitation", AccumulatedPrecipitation);
            writer.WriteStringValue("area", Area);
            writer.WriteStringValue("length", Length);
            writer.WriteStringValue("mass", Mass);
            writer.WriteStringValue("pressure", Pressure);
            writer.WriteStringValue("temperature", Temperature);
            writer.WriteStringValue("volume", Volume);
            writer.WriteStringValue("wind_speed", WindSpeed);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
