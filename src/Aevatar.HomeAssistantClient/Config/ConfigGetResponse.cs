// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Aevatar.HomeAssistantClient.Config
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ConfigGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allowlist_external_dirs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AllowlistExternalDirs { get; set; }
#nullable restore
#else
        public List<string> AllowlistExternalDirs { get; set; }
#endif
        /// <summary>The allowlist_external_urls property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AllowlistExternalUrls { get; set; }
#nullable restore
#else
        public List<string> AllowlistExternalUrls { get; set; }
#endif
        /// <summary>The components property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Components { get; set; }
#nullable restore
#else
        public List<string> Components { get; set; }
#endif
        /// <summary>The config_dir property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConfigDir { get; set; }
#nullable restore
#else
        public string ConfigDir { get; set; }
#endif
        /// <summary>The config_source property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConfigSource { get; set; }
#nullable restore
#else
        public string ConfigSource { get; set; }
#endif
        /// <summary>The country property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>The currency property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>The debug property</summary>
        public bool? Debug { get; set; }
        /// <summary>The elevation property</summary>
        public int? Elevation { get; set; }
        /// <summary>The external_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? ExternalUrl { get; set; }
#nullable restore
#else
        public UntypedNode ExternalUrl { get; set; }
#endif
        /// <summary>The internal_url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? InternalUrl { get; set; }
#nullable restore
#else
        public UntypedNode InternalUrl { get; set; }
#endif
        /// <summary>The language property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Language { get; set; }
#nullable restore
#else
        public string Language { get; set; }
#endif
        /// <summary>The latitude property</summary>
        public double? Latitude { get; set; }
        /// <summary>The location_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocationName { get; set; }
#nullable restore
#else
        public string LocationName { get; set; }
#endif
        /// <summary>The longitude property</summary>
        public double? Longitude { get; set; }
        /// <summary>The radius property</summary>
        public int? Radius { get; set; }
        /// <summary>The recovery_mode property</summary>
        public bool? RecoveryMode { get; set; }
        /// <summary>The safe_mode property</summary>
        public bool? SafeMode { get; set; }
        /// <summary>The state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>The time_zone property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeZone { get; set; }
#nullable restore
#else
        public string TimeZone { get; set; }
#endif
        /// <summary>The unit_system property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse_unit_system? UnitSystem { get; set; }
#nullable restore
#else
        public global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse_unit_system UnitSystem { get; set; }
#endif
        /// <summary>The version property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>The whitelist_external_dirs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? WhitelistExternalDirs { get; set; }
#nullable restore
#else
        public List<string> WhitelistExternalDirs { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse"/> and sets the default values.
        /// </summary>
        public ConfigGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowlist_external_dirs", n => { AllowlistExternalDirs = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "allowlist_external_urls", n => { AllowlistExternalUrls = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "components", n => { Components = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "config_dir", n => { ConfigDir = n.GetStringValue(); } },
                { "config_source", n => { ConfigSource = n.GetStringValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "debug", n => { Debug = n.GetBoolValue(); } },
                { "elevation", n => { Elevation = n.GetIntValue(); } },
                { "external_url", n => { ExternalUrl = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "internal_url", n => { InternalUrl = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "language", n => { Language = n.GetStringValue(); } },
                { "latitude", n => { Latitude = n.GetDoubleValue(); } },
                { "location_name", n => { LocationName = n.GetStringValue(); } },
                { "longitude", n => { Longitude = n.GetDoubleValue(); } },
                { "radius", n => { Radius = n.GetIntValue(); } },
                { "recovery_mode", n => { RecoveryMode = n.GetBoolValue(); } },
                { "safe_mode", n => { SafeMode = n.GetBoolValue(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "time_zone", n => { TimeZone = n.GetStringValue(); } },
                { "unit_system", n => { UnitSystem = n.GetObjectValue<global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse_unit_system>(global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse_unit_system.CreateFromDiscriminatorValue); } },
                { "version", n => { Version = n.GetStringValue(); } },
                { "whitelist_external_dirs", n => { WhitelistExternalDirs = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("allowlist_external_dirs", AllowlistExternalDirs);
            writer.WriteCollectionOfPrimitiveValues<string>("allowlist_external_urls", AllowlistExternalUrls);
            writer.WriteCollectionOfPrimitiveValues<string>("components", Components);
            writer.WriteStringValue("config_dir", ConfigDir);
            writer.WriteStringValue("config_source", ConfigSource);
            writer.WriteStringValue("country", Country);
            writer.WriteStringValue("currency", Currency);
            writer.WriteBoolValue("debug", Debug);
            writer.WriteIntValue("elevation", Elevation);
            writer.WriteObjectValue<UntypedNode>("external_url", ExternalUrl);
            writer.WriteObjectValue<UntypedNode>("internal_url", InternalUrl);
            writer.WriteStringValue("language", Language);
            writer.WriteDoubleValue("latitude", Latitude);
            writer.WriteStringValue("location_name", LocationName);
            writer.WriteDoubleValue("longitude", Longitude);
            writer.WriteIntValue("radius", Radius);
            writer.WriteBoolValue("recovery_mode", RecoveryMode);
            writer.WriteBoolValue("safe_mode", SafeMode);
            writer.WriteStringValue("state", State);
            writer.WriteStringValue("time_zone", TimeZone);
            writer.WriteObjectValue<global::Aevatar.HomeAssistantClient.Config.ConfigGetResponse_unit_system>("unit_system", UnitSystem);
            writer.WriteStringValue("version", Version);
            writer.WriteCollectionOfPrimitiveValues<string>("whitelist_external_dirs", WhitelistExternalDirs);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
