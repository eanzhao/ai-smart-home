// <auto-generated/>
#pragma warning disable CS0618
using Aevatar.HomeAssistantClient.Calendars;
using Aevatar.HomeAssistantClient.Camera_proxy;
using Aevatar.HomeAssistantClient.Components;
using Aevatar.HomeAssistantClient.Config;
using Aevatar.HomeAssistantClient.Error_log;
using Aevatar.HomeAssistantClient.Events;
using Aevatar.HomeAssistantClient.History;
using Aevatar.HomeAssistantClient.Intent;
using Aevatar.HomeAssistantClient.Logbook;
using Aevatar.HomeAssistantClient.Services;
using Aevatar.HomeAssistantClient.States;
using Aevatar.HomeAssistantClient.Template;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Aevatar.HomeAssistantClient
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class HomeAssistantClient : BaseRequestBuilder
    {
        /// <summary>The calendars property</summary>
        public global::Aevatar.HomeAssistantClient.Calendars.CalendarsRequestBuilder Calendars
        {
            get => new global::Aevatar.HomeAssistantClient.Calendars.CalendarsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The camera_proxy property</summary>
        public global::Aevatar.HomeAssistantClient.Camera_proxy.Camera_proxyRequestBuilder Camera_proxy
        {
            get => new global::Aevatar.HomeAssistantClient.Camera_proxy.Camera_proxyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The components property</summary>
        public global::Aevatar.HomeAssistantClient.Components.ComponentsRequestBuilder Components
        {
            get => new global::Aevatar.HomeAssistantClient.Components.ComponentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The config property</summary>
        public global::Aevatar.HomeAssistantClient.Config.ConfigRequestBuilder Config
        {
            get => new global::Aevatar.HomeAssistantClient.Config.ConfigRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The error_log property</summary>
        public global::Aevatar.HomeAssistantClient.Error_log.Error_logRequestBuilder Error_log
        {
            get => new global::Aevatar.HomeAssistantClient.Error_log.Error_logRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The events property</summary>
        public global::Aevatar.HomeAssistantClient.Events.EventsRequestBuilder Events
        {
            get => new global::Aevatar.HomeAssistantClient.Events.EventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The history property</summary>
        public global::Aevatar.HomeAssistantClient.History.HistoryRequestBuilder History
        {
            get => new global::Aevatar.HomeAssistantClient.History.HistoryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The intent property</summary>
        public global::Aevatar.HomeAssistantClient.Intent.IntentRequestBuilder Intent
        {
            get => new global::Aevatar.HomeAssistantClient.Intent.IntentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logbook property</summary>
        public global::Aevatar.HomeAssistantClient.Logbook.LogbookRequestBuilder Logbook
        {
            get => new global::Aevatar.HomeAssistantClient.Logbook.LogbookRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The services property</summary>
        public global::Aevatar.HomeAssistantClient.Services.ServicesRequestBuilder Services
        {
            get => new global::Aevatar.HomeAssistantClient.Services.ServicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The states property</summary>
        public global::Aevatar.HomeAssistantClient.States.StatesRequestBuilder States
        {
            get => new global::Aevatar.HomeAssistantClient.States.StatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The template property</summary>
        public global::Aevatar.HomeAssistantClient.Template.TemplateRequestBuilder Template
        {
            get => new global::Aevatar.HomeAssistantClient.Template.TemplateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Aevatar.HomeAssistantClient.HomeAssistantClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public HomeAssistantClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
        }
        /// <summary>
        /// Returns a message if the API is up and running.```{  &quot;message&quot;: &quot;API running.&quot;}```Sample `curl` command:```curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; http://localhost:8123/api/```
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.GetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Aevatar.HomeAssistantClient.GetResponse?> GetAsGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Aevatar.HomeAssistantClient.GetResponse> GetAsGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Aevatar.HomeAssistantClient.GetResponse>(requestInfo, global::Aevatar.HomeAssistantClient.GetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a message if the API is up and running.```{  &quot;message&quot;: &quot;API running.&quot;}```Sample `curl` command:```curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; http://localhost:8123/api/```
        /// </summary>
        /// <returns>A <see cref="global::Aevatar.HomeAssistantClient.Response"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Aevatar.HomeAssistantClient.Response?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Aevatar.HomeAssistantClient.Response> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Aevatar.HomeAssistantClient.Response>(requestInfo, global::Aevatar.HomeAssistantClient.Response.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a message if the API is up and running.```{  &quot;message&quot;: &quot;API running.&quot;}```Sample `curl` command:```curl \  -H &quot;Authorization: Bearer TOKEN&quot; \  -H &quot;Content-Type: application/json&quot; http://localhost:8123/api/```
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class HomeAssistantClientGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
