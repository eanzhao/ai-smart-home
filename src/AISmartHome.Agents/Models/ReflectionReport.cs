using System.Text.Json.Serialization;

namespace AISmartHome.Agents.Models;

/// <summary>
/// Report generated by ReflectionAgent after analyzing execution results
/// </summary>
public record ReflectionReport
{
    /// <summary>
    /// Unique report identifier
    /// </summary>
    [JsonPropertyName("report_id")]
    public string ReportId { get; init; } = Guid.NewGuid().ToString();
    
    /// <summary>
    /// Task ID that was reflected upon
    /// </summary>
    [JsonPropertyName("task_id")]
    public required string TaskId { get; init; }
    
    /// <summary>
    /// Whether the task was successful
    /// </summary>
    [JsonPropertyName("success")]
    public bool Success { get; init; }
    
    /// <summary>
    /// Efficiency score (0.0 to 1.0)
    /// Based on execution time vs. expected time
    /// </summary>
    [JsonPropertyName("efficiency_score")]
    public double EfficiencyScore { get; init; }
    
    /// <summary>
    /// Quality score (0.0 to 1.0)
    /// Based on result accuracy and completeness
    /// </summary>
    [JsonPropertyName("quality_score")]
    public double QualityScore { get; init; }
    
    /// <summary>
    /// User satisfaction score (0.0 to 1.0, if available)
    /// </summary>
    [JsonPropertyName("satisfaction_score")]
    public double? SatisfactionScore { get; init; }
    
    /// <summary>
    /// Key insights learned from this execution
    /// </summary>
    [JsonPropertyName("insights")]
    public List<string> Insights { get; init; } = new();
    
    /// <summary>
    /// Specific improvement suggestions
    /// </summary>
    [JsonPropertyName("improvement_suggestions")]
    public List<string> ImprovementSuggestions { get; init; } = new();
    
    /// <summary>
    /// Patterns identified (e.g., "User always dims lights to 40% in bedroom")
    /// </summary>
    [JsonPropertyName("patterns")]
    public List<string>? Patterns { get; init; }
    
    /// <summary>
    /// Errors encountered during execution
    /// </summary>
    [JsonPropertyName("errors")]
    public List<string>? Errors { get; init; }
    
    /// <summary>
    /// Root cause analysis of errors (if any)
    /// </summary>
    [JsonPropertyName("root_cause_analysis")]
    public string? RootCauseAnalysis { get; init; }
    
    /// <summary>
    /// What went well
    /// </summary>
    [JsonPropertyName("what_went_well")]
    public List<string> WhatWentWell { get; init; } = new();
    
    /// <summary>
    /// What could be improved
    /// </summary>
    [JsonPropertyName("what_could_improve")]
    public List<string> WhatCouldImprove { get; init; } = new();
    
    /// <summary>
    /// Actual execution time in seconds
    /// </summary>
    [JsonPropertyName("actual_duration_seconds")]
    public double? ActualDurationSeconds { get; init; }
    
    /// <summary>
    /// Expected execution time in seconds
    /// </summary>
    [JsonPropertyName("expected_duration_seconds")]
    public double? ExpectedDurationSeconds { get; init; }
    
    /// <summary>
    /// Timestamp when reflection was performed (UTC)
    /// </summary>
    [JsonPropertyName("timestamp")]
    public DateTime Timestamp { get; init; } = DateTime.UtcNow;
    
    /// <summary>
    /// Whether this reflection should trigger system-wide changes
    /// </summary>
    [JsonPropertyName("requires_system_update")]
    public bool RequiresSystemUpdate { get; init; }
    
    /// <summary>
    /// Recommended actions based on reflection
    /// </summary>
    [JsonPropertyName("recommended_actions")]
    public List<string>? RecommendedActions { get; init; }
}

